%!PS-Adobe-3.0
%%Title: largefile.txt
%%For: Henrik SÃ¸rensen
%%Creator: a2ps version 4.14
%%CreationDate: Sun Dec 10 21:53:17 2023
%%BoundingBox: 24 24 571 818
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 38
%%PageOrder: Ascend
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed strings
% Version 1.2 1/31/1990
% Original Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 595 def
/sw 842 def
/llx 24 def
/urx 818 def
/ury 571 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 8.005733 def
/cw 4.803440 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   501.959430 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(---- START OF FILE: /home/henrik/Projekter/AppFramework/docs/Doxygen/latex/Makef) p n
(ile ----) N
(LATEX_CMD=pdflatex) N
() N
(all: refman.pdf) N
() N
(pdf: refman.pdf) N
() N
(refman.pdf: clean refman.tex) N
() S 8 T ($\(LATEX_CMD\) refman) N
() S 8 T (makeindex refman.idx) N
() S 8 T ($\(LATEX_CMD\) refman) N
() S 8 T (latex_count=8 ; \\) N
() S 8 T (while egrep -s 'Rerun \(LaTeX|to get cross-references right\)' refman.log ) N
(&& [ $$latex_count -gt 0 ] ;\\) N
() S 8 T (    do \\) N
() S 8 T (      echo "Rerunning latex...." ;\\) N
() S 8 T (      $\(LATEX_CMD\) refman ;\\) N
() S 8 T (      latex_count=`expr $$latex_count - 1` ;\\) N
() S 8 T (    done) N
() S 8 T (makeindex refman.idx) N
() S 8 T ($\(LATEX_CMD\) refman) N
() N
() N
(clean:) N
() S 8 T (rm -f *.ps *.dvi *.aux *.toc *.idx *.ind *.ilg *.log *.out *.brf *.blg *) N
(.bbl refman.pdf) N
(---- END OF FILE: /home/henrik/Projekter/AppFramework/docs/Doxygen/latex/Makefil) N
(e ----) N
() N
(---- START OF FILE: /home/henrik/Projekter/AppFramework/Makefile ----) N
(#) N
(#  This file is part of the AppFramework project.) N
(#) N
(#  AppFramework is free software: you can redistribute it and/or modify) N
(#  it under the terms of the GNU General Public License as published by) N
(#  the Free Software Foundation, GPL version 4.) N
(#) N
(#  AppFramework is distributed in the hope that it will be useful,) N
(#  but WITHOUT ANY WARRANTY; without even the implied warranty of) N
(#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the) N
(#  GNU General Public License version 4 for more details.) N
(#) N
(#  You should have received a copy of the GNU General Public License) N
(#  along with AppFramework. If not, see <https://www.gnu.org/licenses/>.) N
(#) N
() N
(.PHONY: rebuild clean git-add git-commit git-push list-targets help) N
() N
(rebuild:) N
() S 8 T (@COMPILER_FLAGS=$\(shell cat config/active_flags.conf\) \\) N
() S 8 T (rm -rf build/ && \\) N
() S 8 T (mkdir build && \\) N
() S 8 T (cd build && \\) N
() S 8 T (cmake .. $$COMPILER_FLAGS && \\) N
() S 8 T (make) N
() S 8 T (@echo "Project Rebuild Complete") N
(mr-proper:) N
() S 8 T (@if [ -d "build" ]; then \\) N
() S 8 T () S 16 T (rm -rf build\\) N
() S 8 T (else \\) N
() S 8 T () S 16 T (echo "Build directory does not exist"; \\) N
(largefile.txt) (Page 1/75) (dec 10, 23 21:52) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (fi) N
(clean:) N
() S 8 T (@if [ -d "build" ]; then \\) N
() S 8 T () S 16 T (cd build && make clean; \\) N
() S 8 T () S 16 T (cd ..; \\) N
() S 8 T () S 16 T (echo "Cleaned build directory"; \\) N
() S 8 T (else \\) N
() S 8 T () S 16 T (echo "Build directory does not exist"; \\) N
() S 8 T (fi) N
(# Git-related targets) N
(git-add:) N
() S 8 T (@echo "Adding all changes to Git...") N
() S 8 T (git add .) N
() N
(git-commit:) N
() S 8 T (@echo "Committing changes...") N
() S 8 T (git commit) N
() N
(git-push:) N
() S 8 T (@echo "Pushing to remote repository...") N
() S 8 T (git push) N
() N
(list-targets:) N
() S 8 T (@grep -E '^[a-zA-Z0-9_-]+:' $\(MAKEFILE_LIST\) | awk -F':' '{print $$1}' |) N
( grep -v '^list-targets$$') N
() N
(todo-list:) N
() S 8 T (@echo "Listing all TODOs in the project...") N
() S 8 T (@grep -rn '//Todo:' . --exclude=Makefile) N
(# Define the help message) N
(HELP_MSG := "\\) N
(Available targets:\\n\\) N
() S 8 T (rebuild        ) S 24 T (:Rebuild the project\\n\\) N
() S 8 T (clean          ) S 24 T (:Clean the project\\n\\) N
() S 8 T (mr-proper) S 24 T () S 32 T (:Remove the build directory\\n\\) N
() S 8 T (git-add        ) S 24 T (:Add all changes to Git\\n\\) N
() S 8 T (git-commit     ) S 24 T (:Commit changes to Git\\n\\) N
() S 8 T (git-push       ) S 24 T (:Push changes to the remote repository\\n\\) N
() S 8 T (list-targets:  ) S 24 T (:List all available targets\\n\\) N
() S 8 T (help           ) S 24 T (:Display this help message\\n") N
() N
(# The default target is 'help', so running 'make' or 'make help' will display th) N
(e help message.) N
(help:) N
() S 8 T (@echo $\(HELP_MSG\)---- END OF FILE: /home/henrik/Projekter/AppFramework/M) N
(akefile ----) N
() N
(---- START OF FILE: /home/henrik/Projekter/AppFramework/build/Makefile ----) N
(# CMAKE generated file: DO NOT EDIT!) N
(# Generated by "Unix Makefiles" Generator, CMake Version 3.22) N
() N
(# Default target executed when no arguments are given to make.) N
(default_target: all) N
(.PHONY : default_target) N
() N
(# Allow only one "make -f Makefile2" at a time, but pass parallelism.) N
(.NOTPARALLEL:) N
() N
(#=============================================================================) N
(# Special targets provided by cmake.) N
() N
(# Disable implicit rules so canonical targets will work.) N
(largefile.txt) (Page 2/75) (dec 10, 23 21:52) title
border
grestore
(Printed by Henrik S\303\270rensen) rhead
(largefile.txt) (1/38) (s\303\270ndag december 10, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(.SUFFIXES:) p n
() N
(# Disable VCS-based implicit rules.) N
(% : %,v) N
() N
(# Disable VCS-based implicit rules.) N
(% : RCS/%) N
() N
(# Disable VCS-based implicit rules.) N
(% : RCS/%,v) N
() N
(# Disable VCS-based implicit rules.) N
(% : SCCS/s.%) N
() N
(# Disable VCS-based implicit rules.) N
(% : s.%) N
() N
(.SUFFIXES: .hpux_make_needs_suffix_list) N
() N
(# Command-line flag to silence nested $\(MAKE\).) N
($\(VERBOSE\)MAKESILENT = -s) N
() N
(#Suppress display of executed commands.) N
($\(VERBOSE\).SILENT:) N
() N
(# A target that is always out of date.) N
(cmake_force:) N
(.PHONY : cmake_force) N
() N
(#=============================================================================) N
(# Set environment variables for the build.) N
() N
(# The shell in which to execute make rules.) N
(SHELL = /bin/sh) N
() N
(# The CMake executable.) N
(CMAKE_COMMAND = /usr/bin/cmake) N
() N
(# The command to remove a file.) N
(RM = /usr/bin/cmake -E rm -f) N
() N
(# Escaping for special characters.) N
(EQUALS = =) N
() N
(# The top-level source directory on which CMake was run.) N
(CMAKE_SOURCE_DIR = /home/henrik/Projekter/AppFramework) N
() N
(# The top-level build directory on which CMake was run.) N
(CMAKE_BINARY_DIR = /home/henrik/Projekter/AppFramework/build) N
() N
(#=============================================================================) N
(# Targets provided globally by CMake.) N
() N
(# Special rule for the target edit_cache) N
(edit_cache:) N
() S 8 T (@$\(CMAKE_COMMAND\) -E cmake_echo_color --switch=$\(COLOR\) --cyan "No inter) N
(active CMake dialog available...") N
() S 8 T (/usr/bin/cmake -E echo No\\ interactive\\ CMake\\ dialog\\ available.) N
(.PHONY : edit_cache) N
() N
(# Special rule for the target edit_cache) N
(edit_cache/fast: edit_cache) N
(largefile.txt) (Page 3/75) (dec 10, 23 21:52) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(.PHONY : edit_cache/fast) p n
() N
(# Special rule for the target rebuild_cache) N
(rebuild_cache:) N
() S 8 T (@$\(CMAKE_COMMAND\) -E cmake_echo_color --switch=$\(COLOR\) --cyan "Running ) N
(CMake to regenerate build system...") N
() S 8 T (/usr/bin/cmake --regenerate-during-build -S$\(CMAKE_SOURCE_DIR\) -B$\(CMAKE) N
(_BINARY_DIR\)) N
(.PHONY : rebuild_cache) N
() N
(# Special rule for the target rebuild_cache) N
(rebuild_cache/fast: rebuild_cache) N
(.PHONY : rebuild_cache/fast) N
() N
(# The main all target) N
(all: cmake_check_build_system) N
() S 8 T ($\(CMAKE_COMMAND\) -E cmake_progress_start /home/henrik/Projekter/AppFrame) N
(work/build/CMakeFiles /home/henrik/Projekter/AppFramework/build//CMakeFiles/prog) N
(ress.marks) N
() S 8 T ($\(MAKE\) $\(MAKESILENT\) -f CMakeFiles/Makefile2 all) N
() S 8 T ($\(CMAKE_COMMAND\) -E cmake_progress_start /home/henrik/Projekter/AppFrame) N
(work/build/CMakeFiles 0) N
(.PHONY : all) N
() N
(# The main clean target) N
(clean:) N
() S 8 T ($\(MAKE\) $\(MAKESILENT\) -f CMakeFiles/Makefile2 clean) N
(.PHONY : clean) N
() N
(# The main clean target) N
(clean/fast: clean) N
(.PHONY : clean/fast) N
() N
(# Prepare targets for installation.) N
(preinstall: all) N
() S 8 T ($\(MAKE\) $\(MAKESILENT\) -f CMakeFiles/Makefile2 preinstall) N
(.PHONY : preinstall) N
() N
(# Prepare targets for installation.) N
(preinstall/fast:) N
() S 8 T ($\(MAKE\) $\(MAKESILENT\) -f CMakeFiles/Makefile2 preinstall) N
(.PHONY : preinstall/fast) N
() N
(# clear depends) N
(depend:) N
() S 8 T ($\(CMAKE_COMMAND\) -S$\(CMAKE_SOURCE_DIR\) -B$\(CMAKE_BINARY_DIR\) --check-bui) N
(ld-system CMakeFiles/Makefile.cmake 1) N
(.PHONY : depend) N
() N
(#=============================================================================) N
(# Target rules for targets named main) N
() N
(# Build rule for target.) N
(main: cmake_check_build_system) N
() S 8 T ($\(MAKE\) $\(MAKESILENT\) -f CMakeFiles/Makefile2 main) N
(.PHONY : main) N
() N
(# fast build rule for target.) N
(main/fast:) N
() S 8 T ($\(MAKE\) $\(MAKESILENT\) -f CMakeFiles/main.dir/build.make CMakeFiles/main.) N
(dir/build) N
(.PHONY : main/fast) N
(largefile.txt) (Page 4/75) (dec 10, 23 21:52) title
border
grestore
(Printed by Henrik S\303\270rensen) rhead
(largefile.txt) (2/38) (s\303\270ndag december 10, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(#=============================================================================) N
(# Target rules for targets named TimeUtils) N
() N
(# Build rule for target.) N
(TimeUtils: cmake_check_build_system) N
() S 8 T ($\(MAKE\) $\(MAKESILENT\) -f CMakeFiles/Makefile2 TimeUtils) N
(.PHONY : TimeUtils) N
() N
(# fast build rule for target.) N
(TimeUtils/fast:) N
() S 8 T ($\(MAKE\) $\(MAKESILENT\) -f subprojects/TimeUtils/CMakeFiles/TimeUtils.dir/) N
(build.make subprojects/TimeUtils/CMakeFiles/TimeUtils.dir/build) N
(.PHONY : TimeUtils/fast) N
() N
(#=============================================================================) N
(# Target rules for targets named StringUtils) N
() N
(# Build rule for target.) N
(StringUtils: cmake_check_build_system) N
() S 8 T ($\(MAKE\) $\(MAKESILENT\) -f CMakeFiles/Makefile2 StringUtils) N
(.PHONY : StringUtils) N
() N
(# fast build rule for target.) N
(StringUtils/fast:) N
() S 8 T ($\(MAKE\) $\(MAKESILENT\) -f subprojects/StringUtils/CMakeFiles/StringUtils.) N
(dir/build.make subprojects/StringUtils/CMakeFiles/StringUtils.dir/build) N
(.PHONY : StringUtils/fast) N
() N
(#=============================================================================) N
(# Target rules for targets named Logger) N
() N
(# Build rule for target.) N
(Logger: cmake_check_build_system) N
() S 8 T ($\(MAKE\) $\(MAKESILENT\) -f CMakeFiles/Makefile2 Logger) N
(.PHONY : Logger) N
() N
(# fast build rule for target.) N
(Logger/fast:) N
() S 8 T ($\(MAKE\) $\(MAKESILENT\) -f subprojects/Logger/CMakeFiles/Logger.dir/build.) N
(make subprojects/Logger/CMakeFiles/Logger.dir/build) N
(.PHONY : Logger/fast) N
() N
(#=============================================================================) N
(# Target rules for targets named EnvVar) N
() N
(# Build rule for target.) N
(EnvVar: cmake_check_build_system) N
() S 8 T ($\(MAKE\) $\(MAKESILENT\) -f CMakeFiles/Makefile2 EnvVar) N
(.PHONY : EnvVar) N
() N
(# fast build rule for target.) N
(EnvVar/fast:) N
() S 8 T ($\(MAKE\) $\(MAKESILENT\) -f subprojects/EnvVar/CMakeFiles/EnvVar.dir/build.) N
(make subprojects/EnvVar/CMakeFiles/EnvVar.dir/build) N
(.PHONY : EnvVar/fast) N
() N
(#=============================================================================) N
(# Target rules for targets named UiManager) N
() N
(# Build rule for target.) N
(UiManager: cmake_check_build_system) N
(largefile.txt) (Page 5/75) (dec 10, 23 21:52) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T ($\(MAKE\) $\(MAKESILENT\) -f CMakeFiles/Makefile2 UiManager) N
(.PHONY : UiManager) N
() N
(# fast build rule for target.) N
(UiManager/fast:) N
() S 8 T ($\(MAKE\) $\(MAKESILENT\) -f subprojects/UiManager/CMakeFiles/UiManager.dir/) N
(build.make subprojects/UiManager/CMakeFiles/UiManager.dir/build) N
(.PHONY : UiManager/fast) N
() N
(#=============================================================================) N
(# Target rules for targets named CommandLineProcessor) N
() N
(# Build rule for target.) N
(CommandLineProcessor: cmake_check_build_system) N
() S 8 T ($\(MAKE\) $\(MAKESILENT\) -f CMakeFiles/Makefile2 CommandLineProcessor) N
(.PHONY : CommandLineProcessor) N
() N
(# fast build rule for target.) N
(CommandLineProcessor/fast:) N
() S 8 T ($\(MAKE\) $\(MAKESILENT\) -f subprojects/CommandLineProcessor/CMakeFiles/Com) N
(mandLineProcessor.dir/build.make subprojects/CommandLineProcessor/CMakeFiles/Com) N
(mandLineProcessor.dir/build) N
(.PHONY : CommandLineProcessor/fast) N
() N
(src/main.o: src/main.cpp.o) N
(.PHONY : src/main.o) N
() N
(# target to build an object file) N
(src/main.cpp.o:) N
() S 8 T ($\(MAKE\) $\(MAKESILENT\) -f CMakeFiles/main.dir/build.make CMakeFiles/main.) N
(dir/src/main.cpp.o) N
(.PHONY : src/main.cpp.o) N
() N
(src/main.i: src/main.cpp.i) N
(.PHONY : src/main.i) N
() N
(# target to preprocess a source file) N
(src/main.cpp.i:) N
() S 8 T ($\(MAKE\) $\(MAKESILENT\) -f CMakeFiles/main.dir/build.make CMakeFiles/main.) N
(dir/src/main.cpp.i) N
(.PHONY : src/main.cpp.i) N
() N
(src/main.s: src/main.cpp.s) N
(.PHONY : src/main.s) N
() N
(# target to generate assembly for a file) N
(src/main.cpp.s:) N
() S 8 T ($\(MAKE\) $\(MAKESILENT\) -f CMakeFiles/main.dir/build.make CMakeFiles/main.) N
(dir/src/main.cpp.s) N
(.PHONY : src/main.cpp.s) N
() N
(# Help Target) N
(help:) N
() S 8 T (@echo "The following are some of the valid targets for this Makefile:") N
() S 8 T (@echo "... all \(the default if no target is provided\)") N
() S 8 T (@echo "... clean") N
() S 8 T (@echo "... depend") N
() S 8 T (@echo "... edit_cache") N
() S 8 T (@echo "... rebuild_cache") N
() S 8 T (@echo "... CommandLineProcessor") N
() S 8 T (@echo "... EnvVar") N
() S 8 T (@echo "... Logger") N
(largefile.txt) (Page 6/75) (dec 10, 23 21:52) title
border
grestore
(Printed by Henrik S\303\270rensen) rhead
(largefile.txt) (3/38) (s\303\270ndag december 10, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (7-8) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (@echo "... StringUtils") N
() S 8 T (@echo "... TimeUtils") N
() S 8 T (@echo "... UiManager") N
() S 8 T (@echo "... main") N
() S 8 T (@echo "... src/main.o") N
() S 8 T (@echo "... src/main.i") N
() S 8 T (@echo "... src/main.s") N
(.PHONY : help) N
() N
() N
() N
(#=============================================================================) N
(# Special targets to cleanup operation of make.) N
() N
(# Special rule to run CMake to check the build system integrity.) N
(# No rule that depends on this can have commands that come from listfiles) N
(# because they might be regenerated.) N
(cmake_check_build_system:) N
() S 8 T ($\(CMAKE_COMMAND\) -S$\(CMAKE_SOURCE_DIR\) -B$\(CMAKE_BINARY_DIR\) --check-bui) N
(ld-system CMakeFiles/Makefile.cmake 0) N
(.PHONY : cmake_check_build_system) N
() N
(---- END OF FILE: /home/henrik/Projekter/AppFramework/build/Makefile ----) N
() N
(---- START OF FILE: /home/henrik/Projekter/AppFramework/build/CMakeFiles/3.22.1/) N
(CompilerIdCXX/CMakeCXXCompilerId.cpp ----) N
(/* This source file must have a .cpp extension so that all C++ compilers) N
(   recognize the extension without flags.  Borland does not know .cxx for) N
(   example.  */) N
(#ifndef __cplusplus) N
(# error "A C compiler has been selected for C++.") N
(#endif) N
() N
(#if !defined\(__has_include\)) N
(/* If the compiler does not have __has_include, pretend the answer is) N
(   always no.  */) N
(#  define __has_include\(x\) 0) N
(#endif) N
() N
() N
(/* Version number components: V=Version, R=Revision, P=Patch) N
(   Version date components:   YYYY=Year, MM=Month,   DD=Day  */) N
() N
(#if defined\(__COMO__\)) N
(# define COMPILER_ID "Comeau") N
(  /* __COMO_VERSION__ = VRR */) N
(# define COMPILER_VERSION_MAJOR DEC\(__COMO_VERSION__ / 100\)) N
(# define COMPILER_VERSION_MINOR DEC\(__COMO_VERSION__ % 100\)) N
() N
(#elif defined\(__INTEL_COMPILER\) || defined\(__ICC\)) N
(# define COMPILER_ID "Intel") N
(# if defined\(_MSC_VER\)) N
(#  define SIMULATE_ID "MSVC") N
(# endif) N
(# if defined\(__GNUC__\)) N
(#  define SIMULATE_ID "GNU") N
(# endif) N
(  /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,) N
(     except that a few beta releases use the old format with V=2021.  */) N
(# if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER =) N
(= 202111) N
(#  define COMPILER_VERSION_MAJOR DEC\(__INTEL_COMPILER/100\)) N
(largefile.txt) (Page 7/75) (dec 10, 23 21:52) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#  define COMPILER_VERSION_MINOR DEC\(__INTEL_COMPILER/10 % 10\)) p n
(#  if defined\(__INTEL_COMPILER_UPDATE\)) N
(#   define COMPILER_VERSION_PATCH DEC\(__INTEL_COMPILER_UPDATE\)) N
(#  else) N
(#   define COMPILER_VERSION_PATCH DEC\(__INTEL_COMPILER   % 10\)) N
(#  endif) N
(# else) N
(#  define COMPILER_VERSION_MAJOR DEC\(__INTEL_COMPILER\)) N
(#  define COMPILER_VERSION_MINOR DEC\(__INTEL_COMPILER_UPDATE\)) N
(   /* The third version component from --version is an update index,) N
(      but no macro is provided for it.  */) N
(#  define COMPILER_VERSION_PATCH DEC\(0\)) N
(# endif) N
(# if defined\(__INTEL_COMPILER_BUILD_DATE\)) N
(   /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */) N
(#  define COMPILER_VERSION_TWEAK DEC\(__INTEL_COMPILER_BUILD_DATE\)) N
(# endif) N
(# if defined\(_MSC_VER\)) N
(   /* _MSC_VER = VVRR */) N
(#  define SIMULATE_VERSION_MAJOR DEC\(_MSC_VER / 100\)) N
(#  define SIMULATE_VERSION_MINOR DEC\(_MSC_VER % 100\)) N
(# endif) N
(# if defined\(__GNUC__\)) N
(#  define SIMULATE_VERSION_MAJOR DEC\(__GNUC__\)) N
(# elif defined\(__GNUG__\)) N
(#  define SIMULATE_VERSION_MAJOR DEC\(__GNUG__\)) N
(# endif) N
(# if defined\(__GNUC_MINOR__\)) N
(#  define SIMULATE_VERSION_MINOR DEC\(__GNUC_MINOR__\)) N
(# endif) N
(# if defined\(__GNUC_PATCHLEVEL__\)) N
(#  define SIMULATE_VERSION_PATCH DEC\(__GNUC_PATCHLEVEL__\)) N
(# endif) N
() N
(#elif \(defined\(__clang__\) && defined\(__INTEL_CLANG_COMPILER\)\) || defined\(__INTEL) N
(_LLVM_COMPILER\)) N
(# define COMPILER_ID "IntelLLVM") N
(#if defined\(_MSC_VER\)) N
(# define SIMULATE_ID "MSVC") N
(#endif) N
(#if defined\(__GNUC__\)) N
(# define SIMULATE_ID "GNU") N
(#endif) N
(/* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and) N
( * later.  Look for 6 digit vs. 8 digit version number to decide encoding.) N
( * VVVV is no smaller than the current year when a version is released.) N
( */) N
(#if __INTEL_LLVM_COMPILER < 1000000L) N
(# define COMPILER_VERSION_MAJOR DEC\(__INTEL_LLVM_COMPILER/100\)) N
(# define COMPILER_VERSION_MINOR DEC\(__INTEL_LLVM_COMPILER/10 % 10\)) N
(# define COMPILER_VERSION_PATCH DEC\(__INTEL_LLVM_COMPILER    % 10\)) N
(#else) N
(# define COMPILER_VERSION_MAJOR DEC\(__INTEL_LLVM_COMPILER/10000\)) N
(# define COMPILER_VERSION_MINOR DEC\(__INTEL_LLVM_COMPILER/100 % 100\)) N
(# define COMPILER_VERSION_PATCH DEC\(__INTEL_LLVM_COMPILER     % 100\)) N
(#endif) N
(#if defined\(_MSC_VER\)) N
(  /* _MSC_VER = VVRR */) N
(# define SIMULATE_VERSION_MAJOR DEC\(_MSC_VER / 100\)) N
(# define SIMULATE_VERSION_MINOR DEC\(_MSC_VER % 100\)) N
(#endif) N
(#if defined\(__GNUC__\)) N
(largefile.txt) (Page 8/75) (dec 10, 23 21:52) title
border
grestore
(Printed by Henrik S\303\270rensen) rhead
(largefile.txt) (4/38) (s\303\270ndag december 10, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (9-10) 5
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(# define SIMULATE_VERSION_MAJOR DEC\(__GNUC__\)) p n
(#elif defined\(__GNUG__\)) N
(# define SIMULATE_VERSION_MAJOR DEC\(__GNUG__\)) N
(#endif) N
(#if defined\(__GNUC_MINOR__\)) N
(# define SIMULATE_VERSION_MINOR DEC\(__GNUC_MINOR__\)) N
(#endif) N
(#if defined\(__GNUC_PATCHLEVEL__\)) N
(# define SIMULATE_VERSION_PATCH DEC\(__GNUC_PATCHLEVEL__\)) N
(#endif) N
() N
(#elif defined\(__PATHCC__\)) N
(# define COMPILER_ID "PathScale") N
(# define COMPILER_VERSION_MAJOR DEC\(__PATHCC__\)) N
(# define COMPILER_VERSION_MINOR DEC\(__PATHCC_MINOR__\)) N
(# if defined\(__PATHCC_PATCHLEVEL__\)) N
(#  define COMPILER_VERSION_PATCH DEC\(__PATHCC_PATCHLEVEL__\)) N
(# endif) N
() N
(#elif defined\(__BORLANDC__\) && defined\(__CODEGEARC_VERSION__\)) N
(# define COMPILER_ID "Embarcadero") N
(# define COMPILER_VERSION_MAJOR HEX\(__CODEGEARC_VERSION__>>24 & 0x00FF\)) N
(# define COMPILER_VERSION_MINOR HEX\(__CODEGEARC_VERSION__>>16 & 0x00FF\)) N
(# define COMPILER_VERSION_PATCH DEC\(__CODEGEARC_VERSION__     & 0xFFFF\)) N
() N
(#elif defined\(__BORLANDC__\)) N
(# define COMPILER_ID "Borland") N
(  /* __BORLANDC__ = 0xVRR */) N
(# define COMPILER_VERSION_MAJOR HEX\(__BORLANDC__>>8\)) N
(# define COMPILER_VERSION_MINOR HEX\(__BORLANDC__ & 0xFF\)) N
() N
(#elif defined\(__WATCOMC__\) && __WATCOMC__ < 1200) N
(# define COMPILER_ID "Watcom") N
(   /* __WATCOMC__ = VVRR */) N
(# define COMPILER_VERSION_MAJOR DEC\(__WATCOMC__ / 100\)) N
(# define COMPILER_VERSION_MINOR DEC\(\(__WATCOMC__ / 10\) % 10\)) N
(# if \(__WATCOMC__ % 10\) > 0) N
(#  define COMPILER_VERSION_PATCH DEC\(__WATCOMC__ % 10\)) N
(# endif) N
() N
(#elif defined\(__WATCOMC__\)) N
(# define COMPILER_ID "OpenWatcom") N
(   /* __WATCOMC__ = VVRP + 1100 */) N
(# define COMPILER_VERSION_MAJOR DEC\(\(__WATCOMC__ - 1100\) / 100\)) N
(# define COMPILER_VERSION_MINOR DEC\(\(__WATCOMC__ / 10\) % 10\)) N
(# if \(__WATCOMC__ % 10\) > 0) N
(#  define COMPILER_VERSION_PATCH DEC\(__WATCOMC__ % 10\)) N
(# endif) N
() N
(#elif defined\(__SUNPRO_CC\)) N
(# define COMPILER_ID "SunPro") N
(# if __SUNPRO_CC >= 0x5100) N
(   /* __SUNPRO_CC = 0xVRRP */) N
(#  define COMPILER_VERSION_MAJOR HEX\(__SUNPRO_CC>>12\)) N
(#  define COMPILER_VERSION_MINOR HEX\(__SUNPRO_CC>>4 & 0xFF\)) N
(#  define COMPILER_VERSION_PATCH HEX\(__SUNPRO_CC    & 0xF\)) N
(# else) N
(   /* __SUNPRO_CC = 0xVRP */) N
(#  define COMPILER_VERSION_MAJOR HEX\(__SUNPRO_CC>>8\)) N
(#  define COMPILER_VERSION_MINOR HEX\(__SUNPRO_CC>>4 & 0xF\)) N
(#  define COMPILER_VERSION_PATCH HEX\(__SUNPRO_CC    & 0xF\)) N
(# endif) N
(largefile.txt) (Page 9/75) (dec 10, 23 21:52) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(#elif defined\(__HP_aCC\)) N
(# define COMPILER_ID "HP") N
(  /* __HP_aCC = VVRRPP */) N
(# define COMPILER_VERSION_MAJOR DEC\(__HP_aCC/10000\)) N
(# define COMPILER_VERSION_MINOR DEC\(__HP_aCC/100 % 100\)) N
(# define COMPILER_VERSION_PATCH DEC\(__HP_aCC     % 100\)) N
() N
(#elif defined\(__DECCXX\)) N
(# define COMPILER_ID "Compaq") N
(  /* __DECCXX_VER = VVRRTPPPP */) N
(# define COMPILER_VERSION_MAJOR DEC\(__DECCXX_VER/10000000\)) N
(# define COMPILER_VERSION_MINOR DEC\(__DECCXX_VER/100000  % 100\)) N
(# define COMPILER_VERSION_PATCH DEC\(__DECCXX_VER         % 10000\)) N
() N
(#elif defined\(__IBMCPP__\) && defined\(__COMPILER_VER__\)) N
(# define COMPILER_ID "zOS") N
(  /* __IBMCPP__ = VRP */) N
(# define COMPILER_VERSION_MAJOR DEC\(__IBMCPP__/100\)) N
(# define COMPILER_VERSION_MINOR DEC\(__IBMCPP__/10 % 10\)) N
(# define COMPILER_VERSION_PATCH DEC\(__IBMCPP__    % 10\)) N
() N
(#elif defined\(__ibmxl__\) && defined\(__clang__\)) N
(# define COMPILER_ID "XLClang") N
(# define COMPILER_VERSION_MAJOR DEC\(__ibmxl_version__\)) N
(# define COMPILER_VERSION_MINOR DEC\(__ibmxl_release__\)) N
(# define COMPILER_VERSION_PATCH DEC\(__ibmxl_modification__\)) N
(# define COMPILER_VERSION_TWEAK DEC\(__ibmxl_ptf_fix_level__\)) N
() N
() N
(#elif defined\(__IBMCPP__\) && !defined\(__COMPILER_VER__\) && __IBMCPP__ >= 800) N
(# define COMPILER_ID "XL") N
(  /* __IBMCPP__ = VRP */) N
(# define COMPILER_VERSION_MAJOR DEC\(__IBMCPP__/100\)) N
(# define COMPILER_VERSION_MINOR DEC\(__IBMCPP__/10 % 10\)) N
(# define COMPILER_VERSION_PATCH DEC\(__IBMCPP__    % 10\)) N
() N
(#elif defined\(__IBMCPP__\) && !defined\(__COMPILER_VER__\) && __IBMCPP__ < 800) N
(# define COMPILER_ID "VisualAge") N
(  /* __IBMCPP__ = VRP */) N
(# define COMPILER_VERSION_MAJOR DEC\(__IBMCPP__/100\)) N
(# define COMPILER_VERSION_MINOR DEC\(__IBMCPP__/10 % 10\)) N
(# define COMPILER_VERSION_PATCH DEC\(__IBMCPP__    % 10\)) N
() N
(#elif defined\(__NVCOMPILER\)) N
(# define COMPILER_ID "NVHPC") N
(# define COMPILER_VERSION_MAJOR DEC\(__NVCOMPILER_MAJOR__\)) N
(# define COMPILER_VERSION_MINOR DEC\(__NVCOMPILER_MINOR__\)) N
(# if defined\(__NVCOMPILER_PATCHLEVEL__\)) N
(#  define COMPILER_VERSION_PATCH DEC\(__NVCOMPILER_PATCHLEVEL__\)) N
(# endif) N
() N
(#elif defined\(__PGI\)) N
(# define COMPILER_ID "PGI") N
(# define COMPILER_VERSION_MAJOR DEC\(__PGIC__\)) N
(# define COMPILER_VERSION_MINOR DEC\(__PGIC_MINOR__\)) N
(# if defined\(__PGIC_PATCHLEVEL__\)) N
(#  define COMPILER_VERSION_PATCH DEC\(__PGIC_PATCHLEVEL__\)) N
(# endif) N
() N
(#elif defined\(_CRAYC\)) N
(# define COMPILER_ID "Cray") N
(largefile.txt) (Page 10/75) (dec 10, 23 21:52) title
border
grestore
(Printed by Henrik S\303\270rensen) rhead
(largefile.txt) (5/38) (s\303\270ndag december 10, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (11-12) 6
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(# define COMPILER_VERSION_MAJOR DEC\(_RELEASE_MAJOR\)) p n
(# define COMPILER_VERSION_MINOR DEC\(_RELEASE_MINOR\)) N
() N
(#elif defined\(__TI_COMPILER_VERSION__\)) N
(# define COMPILER_ID "TI") N
(  /* __TI_COMPILER_VERSION__ = VVVRRRPPP */) N
(# define COMPILER_VERSION_MAJOR DEC\(__TI_COMPILER_VERSION__/1000000\)) N
(# define COMPILER_VERSION_MINOR DEC\(__TI_COMPILER_VERSION__/1000   % 1000\)) N
(# define COMPILER_VERSION_PATCH DEC\(__TI_COMPILER_VERSION__        % 1000\)) N
() N
(#elif defined\(__CLANG_FUJITSU\)) N
(# define COMPILER_ID "FujitsuClang") N
(# define COMPILER_VERSION_MAJOR DEC\(__FCC_major__\)) N
(# define COMPILER_VERSION_MINOR DEC\(__FCC_minor__\)) N
(# define COMPILER_VERSION_PATCH DEC\(__FCC_patchlevel__\)) N
(# define COMPILER_VERSION_INTERNAL_STR __clang_version__) N
() N
() N
(#elif defined\(__FUJITSU\)) N
(# define COMPILER_ID "Fujitsu") N
(# if defined\(__FCC_version__\)) N
(#   define COMPILER_VERSION __FCC_version__) N
(# elif defined\(__FCC_major__\)) N
(#   define COMPILER_VERSION_MAJOR DEC\(__FCC_major__\)) N
(#   define COMPILER_VERSION_MINOR DEC\(__FCC_minor__\)) N
(#   define COMPILER_VERSION_PATCH DEC\(__FCC_patchlevel__\)) N
(# endif) N
(# if defined\(__fcc_version\)) N
(#   define COMPILER_VERSION_INTERNAL DEC\(__fcc_version\)) N
(# elif defined\(__FCC_VERSION\)) N
(#   define COMPILER_VERSION_INTERNAL DEC\(__FCC_VERSION\)) N
(# endif) N
() N
() N
(#elif defined\(__ghs__\)) N
(# define COMPILER_ID "GHS") N
(/* __GHS_VERSION_NUMBER = VVVVRP */) N
(# ifdef __GHS_VERSION_NUMBER) N
(# define COMPILER_VERSION_MAJOR DEC\(__GHS_VERSION_NUMBER / 100\)) N
(# define COMPILER_VERSION_MINOR DEC\(__GHS_VERSION_NUMBER / 10 % 10\)) N
(# define COMPILER_VERSION_PATCH DEC\(__GHS_VERSION_NUMBER      % 10\)) N
(# endif) N
() N
(#elif defined\(__SCO_VERSION__\)) N
(# define COMPILER_ID "SCO") N
() N
(#elif defined\(__ARMCC_VERSION\) && !defined\(__clang__\)) N
(# define COMPILER_ID "ARMCC") N
(#if __ARMCC_VERSION >= 1000000) N
(  /* __ARMCC_VERSION = VRRPPPP */) N
(  # define COMPILER_VERSION_MAJOR DEC\(__ARMCC_VERSION/1000000\)) N
(  # define COMPILER_VERSION_MINOR DEC\(__ARMCC_VERSION/10000 % 100\)) N
(  # define COMPILER_VERSION_PATCH DEC\(__ARMCC_VERSION     % 10000\)) N
(#else) N
(  /* __ARMCC_VERSION = VRPPPP */) N
(  # define COMPILER_VERSION_MAJOR DEC\(__ARMCC_VERSION/100000\)) N
(  # define COMPILER_VERSION_MINOR DEC\(__ARMCC_VERSION/10000 % 10\)) N
(  # define COMPILER_VERSION_PATCH DEC\(__ARMCC_VERSION    % 10000\)) N
(#endif) N
() N
() N
(#elif defined\(__clang__\) && defined\(__apple_build_version__\)) N
(largefile.txt) (Page 11/75) (dec 10, 23 21:52) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(# define COMPILER_ID "AppleClang") p n
(# if defined\(_MSC_VER\)) N
(#  define SIMULATE_ID "MSVC") N
(# endif) N
(# define COMPILER_VERSION_MAJOR DEC\(__clang_major__\)) N
(# define COMPILER_VERSION_MINOR DEC\(__clang_minor__\)) N
(# define COMPILER_VERSION_PATCH DEC\(__clang_patchlevel__\)) N
(# if defined\(_MSC_VER\)) N
(   /* _MSC_VER = VVRR */) N
(#  define SIMULATE_VERSION_MAJOR DEC\(_MSC_VER / 100\)) N
(#  define SIMULATE_VERSION_MINOR DEC\(_MSC_VER % 100\)) N
(# endif) N
(# define COMPILER_VERSION_TWEAK DEC\(__apple_build_version__\)) N
() N
(#elif defined\(__clang__\) && defined\(__ARMCOMPILER_VERSION\)) N
(# define COMPILER_ID "ARMClang") N
(  # define COMPILER_VERSION_MAJOR DEC\(__ARMCOMPILER_VERSION/1000000\)) N
(  # define COMPILER_VERSION_MINOR DEC\(__ARMCOMPILER_VERSION/10000 % 100\)) N
(  # define COMPILER_VERSION_PATCH DEC\(__ARMCOMPILER_VERSION     % 10000\)) N
(# define COMPILER_VERSION_INTERNAL DEC\(__ARMCOMPILER_VERSION\)) N
() N
(#elif defined\(__clang__\)) N
(# define COMPILER_ID "Clang") N
(# if defined\(_MSC_VER\)) N
(#  define SIMULATE_ID "MSVC") N
(# endif) N
(# define COMPILER_VERSION_MAJOR DEC\(__clang_major__\)) N
(# define COMPILER_VERSION_MINOR DEC\(__clang_minor__\)) N
(# define COMPILER_VERSION_PATCH DEC\(__clang_patchlevel__\)) N
(# if defined\(_MSC_VER\)) N
(   /* _MSC_VER = VVRR */) N
(#  define SIMULATE_VERSION_MAJOR DEC\(_MSC_VER / 100\)) N
(#  define SIMULATE_VERSION_MINOR DEC\(_MSC_VER % 100\)) N
(# endif) N
() N
(#elif defined\(__GNUC__\) || defined\(__GNUG__\)) N
(# define COMPILER_ID "GNU") N
(# if defined\(__GNUC__\)) N
(#  define COMPILER_VERSION_MAJOR DEC\(__GNUC__\)) N
(# else) N
(#  define COMPILER_VERSION_MAJOR DEC\(__GNUG__\)) N
(# endif) N
(# if defined\(__GNUC_MINOR__\)) N
(#  define COMPILER_VERSION_MINOR DEC\(__GNUC_MINOR__\)) N
(# endif) N
(# if defined\(__GNUC_PATCHLEVEL__\)) N
(#  define COMPILER_VERSION_PATCH DEC\(__GNUC_PATCHLEVEL__\)) N
(# endif) N
() N
(#elif defined\(_MSC_VER\)) N
(# define COMPILER_ID "MSVC") N
(  /* _MSC_VER = VVRR */) N
(# define COMPILER_VERSION_MAJOR DEC\(_MSC_VER / 100\)) N
(# define COMPILER_VERSION_MINOR DEC\(_MSC_VER % 100\)) N
(# if defined\(_MSC_FULL_VER\)) N
(#  if _MSC_VER >= 1400) N
(    /* _MSC_FULL_VER = VVRRPPPPP */) N
(#   define COMPILER_VERSION_PATCH DEC\(_MSC_FULL_VER % 100000\)) N
(#  else) N
(    /* _MSC_FULL_VER = VVRRPPPP */) N
(#   define COMPILER_VERSION_PATCH DEC\(_MSC_FULL_VER % 10000\)) N
(#  endif) N
(largefile.txt) (Page 12/75) (dec 10, 23 21:52) title
border
grestore
(Printed by Henrik S\303\270rensen) rhead
(largefile.txt) (6/38) (s\303\270ndag december 10, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (13-14) 7
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(# endif) p n
(# if defined\(_MSC_BUILD\)) N
(#  define COMPILER_VERSION_TWEAK DEC\(_MSC_BUILD\)) N
(# endif) N
() N
(#elif defined\(__VISUALDSPVERSION__\) || defined\(__ADSPBLACKFIN__\) || defined\(__AD) N
(SPTS__\) || defined\(__ADSP21000__\)) N
(# define COMPILER_ID "ADSP") N
(#if defined\(__VISUALDSPVERSION__\)) N
(  /* __VISUALDSPVERSION__ = 0xVVRRPP00 */) N
(# define COMPILER_VERSION_MAJOR HEX\(__VISUALDSPVERSION__>>24\)) N
(# define COMPILER_VERSION_MINOR HEX\(__VISUALDSPVERSION__>>16 & 0xFF\)) N
(# define COMPILER_VERSION_PATCH HEX\(__VISUALDSPVERSION__>>8  & 0xFF\)) N
(#endif) N
() N
(#elif defined\(__IAR_SYSTEMS_ICC__\) || defined\(__IAR_SYSTEMS_ICC\)) N
(# define COMPILER_ID "IAR") N
(# if defined\(__VER__\) && defined\(__ICCARM__\)) N
(#  define COMPILER_VERSION_MAJOR DEC\(\(__VER__\) / 1000000\)) N
(#  define COMPILER_VERSION_MINOR DEC\(\(\(__VER__\) / 1000\) % 1000\)) N
(#  define COMPILER_VERSION_PATCH DEC\(\(__VER__\) % 1000\)) N
(#  define COMPILER_VERSION_INTERNAL DEC\(__IAR_SYSTEMS_ICC__\)) N
(# elif defined\(__VER__\) && \(defined\(__ICCAVR__\) || defined\(__ICCRX__\) || defined) N
(\(__ICCRH850__\) || defined\(__ICCRL78__\) || defined\(__ICC430__\) || defined\(__ICCRI) N
(SCV__\) || defined\(__ICCV850__\) || defined\(__ICC8051__\) || defined\(__ICCSTM8__\)\)) N
(#  define COMPILER_VERSION_MAJOR DEC\(\(__VER__\) / 100\)) N
(#  define COMPILER_VERSION_MINOR DEC\(\(__VER__\) - \(\(\(__VER__\) / 100\)*100\)\)) N
(#  define COMPILER_VERSION_PATCH DEC\(__SUBVERSION__\)) N
(#  define COMPILER_VERSION_INTERNAL DEC\(__IAR_SYSTEMS_ICC__\)) N
(# endif) N
() N
() N
(/* These compilers are either not known or too old to define an) N
(  identification macro.  Try to identify the platform and guess that) N
(  it is the native compiler.  */) N
(#elif defined\(__hpux\) || defined\(__hpua\)) N
(# define COMPILER_ID "HP") N
() N
(#else /* unknown compiler */) N
(# define COMPILER_ID "") N
(#endif) N
() N
(/* Construct the string literal in pieces to prevent the source from) N
(   getting matched.  Store it in a pointer rather than an array) N
(   because some compilers will just produce instructions to fill the) N
(   array rather than assigning a pointer to a static array.  */) N
(char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";) N
(#ifdef SIMULATE_ID) N
(char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";) N
(#endif) N
() N
(#ifdef __QNXNTO__) N
(char const* qnxnto = "INFO" ":" "qnxnto[]";) N
(#endif) N
() N
(#if defined\(__CRAYXT_COMPUTE_LINUX_TARGET\)) N
(char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";) N
(#endif) N
() N
(#define STRINGIFY_HELPER\(X\) #X) N
(#define STRINGIFY\(X\) STRINGIFY_HELPER\(X\)) N
() N
(largefile.txt) (Page 13/75) (dec 10, 23 21:52) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/* Identify known platforms by name.  */) p n
(#if defined\(__linux\) || defined\(__linux__\) || defined\(linux\)) N
(# define PLATFORM_ID "Linux") N
() N
(#elif defined\(__MSYS__\)) N
(# define PLATFORM_ID "MSYS") N
() N
(#elif defined\(__CYGWIN__\)) N
(# define PLATFORM_ID "Cygwin") N
() N
(#elif defined\(__MINGW32__\)) N
(# define PLATFORM_ID "MinGW") N
() N
(#elif defined\(__APPLE__\)) N
(# define PLATFORM_ID "Darwin") N
() N
(#elif defined\(_WIN32\) || defined\(__WIN32__\) || defined\(WIN32\)) N
(# define PLATFORM_ID "Windows") N
() N
(#elif defined\(__FreeBSD__\) || defined\(__FreeBSD\)) N
(# define PLATFORM_ID "FreeBSD") N
() N
(#elif defined\(__NetBSD__\) || defined\(__NetBSD\)) N
(# define PLATFORM_ID "NetBSD") N
() N
(#elif defined\(__OpenBSD__\) || defined\(__OPENBSD\)) N
(# define PLATFORM_ID "OpenBSD") N
() N
(#elif defined\(__sun\) || defined\(sun\)) N
(# define PLATFORM_ID "SunOS") N
() N
(#elif defined\(_AIX\) || defined\(__AIX\) || defined\(__AIX__\) || defined\(__aix\) || d) N
(efined\(__aix__\)) N
(# define PLATFORM_ID "AIX") N
() N
(#elif defined\(__hpux\) || defined\(__hpux__\)) N
(# define PLATFORM_ID "HP-UX") N
() N
(#elif defined\(__HAIKU__\)) N
(# define PLATFORM_ID "Haiku") N
() N
(#elif defined\(__BeOS\) || defined\(__BEOS__\) || defined\(_BEOS\)) N
(# define PLATFORM_ID "BeOS") N
() N
(#elif defined\(__QNX__\) || defined\(__QNXNTO__\)) N
(# define PLATFORM_ID "QNX") N
() N
(#elif defined\(__tru64\) || defined\(_tru64\) || defined\(__TRU64__\)) N
(# define PLATFORM_ID "Tru64") N
() N
(#elif defined\(__riscos\) || defined\(__riscos__\)) N
(# define PLATFORM_ID "RISCos") N
() N
(#elif defined\(__sinix\) || defined\(__sinix__\) || defined\(__SINIX__\)) N
(# define PLATFORM_ID "SINIX") N
() N
(#elif defined\(__UNIX_SV__\)) N
(# define PLATFORM_ID "UNIX_SV") N
() N
(#elif defined\(__bsdos__\)) N
(# define PLATFORM_ID "BSDOS") N
() N
(largefile.txt) (Page 14/75) (dec 10, 23 21:52) title
border
grestore
(Printed by Henrik S\303\270rensen) rhead
(largefile.txt) (7/38) (s\303\270ndag december 10, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (15-16) 8
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#elif defined\(_MPRAS\) || defined\(MPRAS\)) p n
(# define PLATFORM_ID "MP-RAS") N
() N
(#elif defined\(__osf\) || defined\(__osf__\)) N
(# define PLATFORM_ID "OSF1") N
() N
(#elif defined\(_SCO_SV\) || defined\(SCO_SV\) || defined\(sco_sv\)) N
(# define PLATFORM_ID "SCO_SV") N
() N
(#elif defined\(__ultrix\) || defined\(__ultrix__\) || defined\(_ULTRIX\)) N
(# define PLATFORM_ID "ULTRIX") N
() N
(#elif defined\(__XENIX__\) || defined\(_XENIX\) || defined\(XENIX\)) N
(# define PLATFORM_ID "Xenix") N
() N
(#elif defined\(__WATCOMC__\)) N
(# if defined\(__LINUX__\)) N
(#  define PLATFORM_ID "Linux") N
() N
(# elif defined\(__DOS__\)) N
(#  define PLATFORM_ID "DOS") N
() N
(# elif defined\(__OS2__\)) N
(#  define PLATFORM_ID "OS2") N
() N
(# elif defined\(__WINDOWS__\)) N
(#  define PLATFORM_ID "Windows3x") N
() N
(# elif defined\(__VXWORKS__\)) N
(#  define PLATFORM_ID "VxWorks") N
() N
(# else /* unknown platform */) N
(#  define PLATFORM_ID) N
(# endif) N
() N
(#elif defined\(__INTEGRITY\)) N
(# if defined\(INT_178B\)) N
(#  define PLATFORM_ID "Integrity178") N
() N
(# else /* regular Integrity */) N
(#  define PLATFORM_ID "Integrity") N
(# endif) N
() N
(#else /* unknown platform */) N
(# define PLATFORM_ID) N
() N
(#endif) N
() N
(/* For windows compilers MSVC and Intel we can determine) N
(   the architecture of the compiler being used.  This is because) N
(   the compilers do not have flags that can change the architecture,) N
(   but rather depend on which compiler is being used) N
(*/) N
(#if defined\(_WIN32\) && defined\(_MSC_VER\)) N
(# if defined\(_M_IA64\)) N
(#  define ARCHITECTURE_ID "IA64") N
() N
(# elif defined\(_M_ARM64EC\)) N
(#  define ARCHITECTURE_ID "ARM64EC") N
() N
(# elif defined\(_M_X64\) || defined\(_M_AMD64\)) N
(#  define ARCHITECTURE_ID "x64") N
(largefile.txt) (Page 15/75) (dec 10, 23 21:52) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(# elif defined\(_M_IX86\)) N
(#  define ARCHITECTURE_ID "X86") N
() N
(# elif defined\(_M_ARM64\)) N
(#  define ARCHITECTURE_ID "ARM64") N
() N
(# elif defined\(_M_ARM\)) N
(#  if _M_ARM == 4) N
(#   define ARCHITECTURE_ID "ARMV4I") N
(#  elif _M_ARM == 5) N
(#   define ARCHITECTURE_ID "ARMV5I") N
(#  else) N
(#   define ARCHITECTURE_ID "ARMV" STRINGIFY\(_M_ARM\)) N
(#  endif) N
() N
(# elif defined\(_M_MIPS\)) N
(#  define ARCHITECTURE_ID "MIPS") N
() N
(# elif defined\(_M_SH\)) N
(#  define ARCHITECTURE_ID "SHx") N
() N
(# else /* unknown architecture */) N
(#  define ARCHITECTURE_ID "") N
(# endif) N
() N
(#elif defined\(__WATCOMC__\)) N
(# if defined\(_M_I86\)) N
(#  define ARCHITECTURE_ID "I86") N
() N
(# elif defined\(_M_IX86\)) N
(#  define ARCHITECTURE_ID "X86") N
() N
(# else /* unknown architecture */) N
(#  define ARCHITECTURE_ID "") N
(# endif) N
() N
(#elif defined\(__IAR_SYSTEMS_ICC__\) || defined\(__IAR_SYSTEMS_ICC\)) N
(# if defined\(__ICCARM__\)) N
(#  define ARCHITECTURE_ID "ARM") N
() N
(# elif defined\(__ICCRX__\)) N
(#  define ARCHITECTURE_ID "RX") N
() N
(# elif defined\(__ICCRH850__\)) N
(#  define ARCHITECTURE_ID "RH850") N
() N
(# elif defined\(__ICCRL78__\)) N
(#  define ARCHITECTURE_ID "RL78") N
() N
(# elif defined\(__ICCRISCV__\)) N
(#  define ARCHITECTURE_ID "RISCV") N
() N
(# elif defined\(__ICCAVR__\)) N
(#  define ARCHITECTURE_ID "AVR") N
() N
(# elif defined\(__ICC430__\)) N
(#  define ARCHITECTURE_ID "MSP430") N
() N
(# elif defined\(__ICCV850__\)) N
(#  define ARCHITECTURE_ID "V850") N
() N
(largefile.txt) (Page 16/75) (dec 10, 23 21:52) title
border
grestore
(Printed by Henrik S\303\270rensen) rhead
(largefile.txt) (8/38) (s\303\270ndag december 10, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (17-18) 9
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(# elif defined\(__ICC8051__\)) p n
(#  define ARCHITECTURE_ID "8051") N
() N
(# elif defined\(__ICCSTM8__\)) N
(#  define ARCHITECTURE_ID "STM8") N
() N
(# else /* unknown architecture */) N
(#  define ARCHITECTURE_ID "") N
(# endif) N
() N
(#elif defined\(__ghs__\)) N
(# if defined\(__PPC64__\)) N
(#  define ARCHITECTURE_ID "PPC64") N
() N
(# elif defined\(__ppc__\)) N
(#  define ARCHITECTURE_ID "PPC") N
() N
(# elif defined\(__ARM__\)) N
(#  define ARCHITECTURE_ID "ARM") N
() N
(# elif defined\(__x86_64__\)) N
(#  define ARCHITECTURE_ID "x64") N
() N
(# elif defined\(__i386__\)) N
(#  define ARCHITECTURE_ID "X86") N
() N
(# else /* unknown architecture */) N
(#  define ARCHITECTURE_ID "") N
(# endif) N
() N
(#elif defined\(__TI_COMPILER_VERSION__\)) N
(# if defined\(__TI_ARM__\)) N
(#  define ARCHITECTURE_ID "ARM") N
() N
(# elif defined\(__MSP430__\)) N
(#  define ARCHITECTURE_ID "MSP430") N
() N
(# elif defined\(__TMS320C28XX__\)) N
(#  define ARCHITECTURE_ID "TMS320C28x") N
() N
(# elif defined\(__TMS320C6X__\) || defined\(_TMS320C6X\)) N
(#  define ARCHITECTURE_ID "TMS320C6x") N
() N
(# else /* unknown architecture */) N
(#  define ARCHITECTURE_ID "") N
(# endif) N
() N
(#else) N
(#  define ARCHITECTURE_ID) N
(#endif) N
() N
(/* Convert integer to decimal digit literals.  */) N
(#define DEC\(n\)                   \\) N
(  \('0' + \(\(\(n\) / 10000000\)%10\)\), \\) N
(  \('0' + \(\(\(n\) / 1000000\)%10\)\),  \\) N
(  \('0' + \(\(\(n\) / 100000\)%10\)\),   \\) N
(  \('0' + \(\(\(n\) / 10000\)%10\)\),    \\) N
(  \('0' + \(\(\(n\) / 1000\)%10\)\),     \\) N
(  \('0' + \(\(\(n\) / 100\)%10\)\),      \\) N
(  \('0' + \(\(\(n\) / 10\)%10\)\),       \\) N
(  \('0' +  \(\(n\) % 10\)\)) N
() N
(largefile.txt) (Page 17/75) (dec 10, 23 21:52) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/* Convert integer to hex digit literals.  */) p n
(#define HEX\(n\)             \\) N
(  \('0' + \(\(n\)>>28 & 0xF\)\), \\) N
(  \('0' + \(\(n\)>>24 & 0xF\)\), \\) N
(  \('0' + \(\(n\)>>20 & 0xF\)\), \\) N
(  \('0' + \(\(n\)>>16 & 0xF\)\), \\) N
(  \('0' + \(\(n\)>>12 & 0xF\)\), \\) N
(  \('0' + \(\(n\)>>8  & 0xF\)\), \\) N
(  \('0' + \(\(n\)>>4  & 0xF\)\), \\) N
(  \('0' + \(\(n\)     & 0xF\)\)) N
() N
(/* Construct a string literal encoding the version number. */) N
(#ifdef COMPILER_VERSION) N
(char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";) N
() N
(/* Construct a string literal encoding the version number components. */) N
(#elif defined\(COMPILER_VERSION_MAJOR\)) N
(char const info_version[] = {) N
(  'I', 'N', 'F', 'O', ':',) N
(  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',) N
(  COMPILER_VERSION_MAJOR,) N
(# ifdef COMPILER_VERSION_MINOR) N
(  '.', COMPILER_VERSION_MINOR,) N
(#  ifdef COMPILER_VERSION_PATCH) N
(   '.', COMPILER_VERSION_PATCH,) N
(#   ifdef COMPILER_VERSION_TWEAK) N
(    '.', COMPILER_VERSION_TWEAK,) N
(#   endif) N
(#  endif) N
(# endif) N
(  ']','\\0'};) N
(#endif) N
() N
(/* Construct a string literal encoding the internal version number. */) N
(#ifdef COMPILER_VERSION_INTERNAL) N
(char const info_version_internal[] = {) N
(  'I', 'N', 'F', 'O', ':',) N
(  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','_',) N
(  'i','n','t','e','r','n','a','l','[',) N
(  COMPILER_VERSION_INTERNAL,']','\\0'};) N
(#elif defined\(COMPILER_VERSION_INTERNAL_STR\)) N
(char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMP) N
(ILER_VERSION_INTERNAL_STR "]";) N
(#endif) N
() N
(/* Construct a string literal encoding the version number components. */) N
(#ifdef SIMULATE_VERSION_MAJOR) N
(char const info_simulate_version[] = {) N
(  'I', 'N', 'F', 'O', ':',) N
(  's','i','m','u','l','a','t','e','_','v','e','r','s','i','o','n','[',) N
(  SIMULATE_VERSION_MAJOR,) N
(# ifdef SIMULATE_VERSION_MINOR) N
(  '.', SIMULATE_VERSION_MINOR,) N
(#  ifdef SIMULATE_VERSION_PATCH) N
(   '.', SIMULATE_VERSION_PATCH,) N
(#   ifdef SIMULATE_VERSION_TWEAK) N
(    '.', SIMULATE_VERSION_TWEAK,) N
(#   endif) N
(#  endif) N
(# endif) N
(  ']','\\0'};) N
(#endif) N
(largefile.txt) (Page 18/75) (dec 10, 23 21:52) title
border
grestore
(Printed by Henrik S\303\270rensen) rhead
(largefile.txt) (9/38) (s\303\270ndag december 10, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (19-20) 10
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(/* Construct the string literal in pieces to prevent the source from) N
(   getting matched.  Store it in a pointer rather than an array) N
(   because some compilers will just produce instructions to fill the) N
(   array rather than assigning a pointer to a static array.  */) N
(char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";) N
(char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";) N
() N
() N
() N
(#if defined\(__INTEL_COMPILER\) && defined\(_MSVC_LANG\) && _MSVC_LANG < 201403L) N
(#  if defined\(__INTEL_CXX11_MODE__\)) N
(#    if defined\(__cpp_aggregate_nsdmi\)) N
(#      define CXX_STD 201402L) N
(#    else) N
(#      define CXX_STD 201103L) N
(#    endif) N
(#  else) N
(#    define CXX_STD 199711L) N
(#  endif) N
(#elif defined\(_MSC_VER\) && defined\(_MSVC_LANG\)) N
(#  define CXX_STD _MSVC_LANG) N
(#else) N
(#  define CXX_STD __cplusplus) N
(#endif) N
() N
(const char* info_language_standard_default = "INFO" ":" "standard_default[") N
(#if CXX_STD > 202002L) N
(  "23") N
(#elif CXX_STD > 201703L) N
(  "20") N
(#elif CXX_STD >= 201703L) N
(  "17") N
(#elif CXX_STD >= 201402L) N
(  "14") N
(#elif CXX_STD >= 201103L) N
(  "11") N
(#else) N
(  "98") N
(#endif) N
("]";) N
() N
(const char* info_language_extensions_default = "INFO" ":" "extensions_default[") N
(/* !defined\(_MSC_VER\) to exclude Clang's MSVC compatibility mode. */) N
(#if \(defined\(__clang__\) || defined\(__GNUC__\) ||                               \\) N
(     defined\(__TI_COMPILER_VERSION__\)\) &&                                     \\) N
(  !defined\(__STRICT_ANSI__\) && !defined\(_MSC_VER\)) N
(  "ON") N
(#else) N
(  "OFF") N
(#endif) N
("]";) N
() N
(/*--------------------------------------------------------------------------*/) N
() N
(int main\(int argc, char* argv[]\)) N
({) N
(  int require = 0;) N
(  require += info_compiler[argc];) N
(  require += info_platform[argc];) N
(#ifdef COMPILER_VERSION_MAJOR) N
(  require += info_version[argc];) N
(largefile.txt) (Page 19/75) (dec 10, 23 21:52) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#endif) p n
(#ifdef COMPILER_VERSION_INTERNAL) N
(  require += info_version_internal[argc];) N
(#endif) N
(#ifdef SIMULATE_ID) N
(  require += info_simulate[argc];) N
(#endif) N
(#ifdef SIMULATE_VERSION_MAJOR) N
(  require += info_simulate_version[argc];) N
(#endif) N
(#if defined\(__CRAYXT_COMPUTE_LINUX_TARGET\)) N
(  require += info_cray[argc];) N
(#endif) N
(  require += info_language_standard_default[argc];) N
(  require += info_language_extensions_default[argc];) N
(  \(void\)argv;) N
(  return require;) N
(}) N
(---- END OF FILE: /home/henrik/Projekter/AppFramework/build/CMakeFiles/3.22.1/Co) N
(mpilerIdCXX/CMakeCXXCompilerId.cpp ----) N
() N
(---- START OF FILE: /home/henrik/Projekter/AppFramework/build/subprojects/Logger) N
(/Makefile ----) N
(# CMAKE generated file: DO NOT EDIT!) N
(# Generated by "Unix Makefiles" Generator, CMake Version 3.22) N
() N
(# Default target executed when no arguments are given to make.) N
(default_target: all) N
(.PHONY : default_target) N
() N
(# Allow only one "make -f Makefile2" at a time, but pass parallelism.) N
(.NOTPARALLEL:) N
() N
(#=============================================================================) N
(# Special targets provided by cmake.) N
() N
(# Disable implicit rules so canonical targets will work.) N
(.SUFFIXES:) N
() N
(# Disable VCS-based implicit rules.) N
(% : %,v) N
() N
(# Disable VCS-based implicit rules.) N
(% : RCS/%) N
() N
(# Disable VCS-based implicit rules.) N
(% : RCS/%,v) N
() N
(# Disable VCS-based implicit rules.) N
(% : SCCS/s.%) N
() N
(# Disable VCS-based implicit rules.) N
(% : s.%) N
() N
(.SUFFIXES: .hpux_make_needs_suffix_list) N
() N
(# Command-line flag to silence nested $\(MAKE\).) N
($\(VERBOSE\)MAKESILENT = -s) N
() N
(#Suppress display of executed commands.) N
($\(VERBOSE\).SILENT:) N
() N
(largefile.txt) (Page 20/75) (dec 10, 23 21:52) title
border
grestore
(Printed by Henrik S\303\270rensen) rhead
(largefile.txt) (10/38) (s\303\270ndag december 10, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (21-22) 11
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(# A target that is always out of date.) p n
(cmake_force:) N
(.PHONY : cmake_force) N
() N
(#=============================================================================) N
(# Set environment variables for the build.) N
() N
(# The shell in which to execute make rules.) N
(SHELL = /bin/sh) N
() N
(# The CMake executable.) N
(CMAKE_COMMAND = /usr/bin/cmake) N
() N
(# The command to remove a file.) N
(RM = /usr/bin/cmake -E rm -f) N
() N
(# Escaping for special characters.) N
(EQUALS = =) N
() N
(# The top-level source directory on which CMake was run.) N
(CMAKE_SOURCE_DIR = /home/henrik/Projekter/AppFramework) N
() N
(# The top-level build directory on which CMake was run.) N
(CMAKE_BINARY_DIR = /home/henrik/Projekter/AppFramework/build) N
() N
(#=============================================================================) N
(# Targets provided globally by CMake.) N
() N
(# Special rule for the target edit_cache) N
(edit_cache:) N
() S 8 T (@$\(CMAKE_COMMAND\) -E cmake_echo_color --switch=$\(COLOR\) --cyan "No inter) N
(active CMake dialog available...") N
() S 8 T (/usr/bin/cmake -E echo No\\ interactive\\ CMake\\ dialog\\ available.) N
(.PHONY : edit_cache) N
() N
(# Special rule for the target edit_cache) N
(edit_cache/fast: edit_cache) N
(.PHONY : edit_cache/fast) N
() N
(# Special rule for the target rebuild_cache) N
(rebuild_cache:) N
() S 8 T (@$\(CMAKE_COMMAND\) -E cmake_echo_color --switch=$\(COLOR\) --cyan "Running ) N
(CMake to regenerate build system...") N
() S 8 T (/usr/bin/cmake --regenerate-during-build -S$\(CMAKE_SOURCE_DIR\) -B$\(CMAKE) N
(_BINARY_DIR\)) N
(.PHONY : rebuild_cache) N
() N
(# Special rule for the target rebuild_cache) N
(rebuild_cache/fast: rebuild_cache) N
(.PHONY : rebuild_cache/fast) N
() N
(# The main all target) N
(all: cmake_check_build_system) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(CMAKE_COMMAND\) -E cmak) N
(e_progress_start /home/henrik/Projekter/AppFramework/build/CMakeFiles /home/henr) N
(ik/Projekter/AppFramework/build/subprojects/Logger//CMakeFiles/progress.marks) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( CMakeFiles/Makefile2 subprojects/Logger/all) N
() S 8 T ($\(CMAKE_COMMAND\) -E cmake_progress_start /home/henrik/Projekter/AppFrame) N
(work/build/CMakeFiles 0) N
(.PHONY : all) N
() N
(largefile.txt) (Page 21/75) (dec 10, 23 21:52) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(# The main clean target) p n
(clean:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( CMakeFiles/Makefile2 subprojects/Logger/clean) N
(.PHONY : clean) N
() N
(# The main clean target) N
(clean/fast: clean) N
(.PHONY : clean/fast) N
() N
(# Prepare targets for installation.) N
(preinstall: all) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( CMakeFiles/Makefile2 subprojects/Logger/preinstall) N
(.PHONY : preinstall) N
() N
(# Prepare targets for installation.) N
(preinstall/fast:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( CMakeFiles/Makefile2 subprojects/Logger/preinstall) N
(.PHONY : preinstall/fast) N
() N
(# clear depends) N
(depend:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(CMAKE_COMMAND\) -S$\(CMA) N
(KE_SOURCE_DIR\) -B$\(CMAKE_BINARY_DIR\) --check-build-system CMakeFiles/Makefile.cm) N
(ake 1) N
(.PHONY : depend) N
() N
(# Convenience name for target.) N
(subprojects/Logger/CMakeFiles/Logger.dir/rule:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( CMakeFiles/Makefile2 subprojects/Logger/CMakeFiles/Logger.dir/rule) N
(.PHONY : subprojects/Logger/CMakeFiles/Logger.dir/rule) N
() N
(# Convenience name for target.) N
(Logger: subprojects/Logger/CMakeFiles/Logger.dir/rule) N
(.PHONY : Logger) N
() N
(# fast build rule for target.) N
(Logger/fast:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( subprojects/Logger/CMakeFiles/Logger.dir/build.make subprojects/Logger/CMakeFil) N
(es/Logger.dir/build) N
(.PHONY : Logger/fast) N
() N
(Logger.o: Logger.cpp.o) N
(.PHONY : Logger.o) N
() N
(# target to build an object file) N
(Logger.cpp.o:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( subprojects/Logger/CMakeFiles/Logger.dir/build.make subprojects/Logger/CMakeFil) N
(es/Logger.dir/Logger.cpp.o) N
(.PHONY : Logger.cpp.o) N
() N
(Logger.i: Logger.cpp.i) N
(.PHONY : Logger.i) N
() N
(# target to preprocess a source file) N
(Logger.cpp.i:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
(largefile.txt) (Page 22/75) (dec 10, 23 21:52) title
border
grestore
(Printed by Henrik S\303\270rensen) rhead
(largefile.txt) (11/38) (s\303\270ndag december 10, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (23-24) 12
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
( subprojects/Logger/CMakeFiles/Logger.dir/build.make subprojects/Logger/CMakeFil) p n
(es/Logger.dir/Logger.cpp.i) N
(.PHONY : Logger.cpp.i) N
() N
(Logger.s: Logger.cpp.s) N
(.PHONY : Logger.s) N
() N
(# target to generate assembly for a file) N
(Logger.cpp.s:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( subprojects/Logger/CMakeFiles/Logger.dir/build.make subprojects/Logger/CMakeFil) N
(es/Logger.dir/Logger.cpp.s) N
(.PHONY : Logger.cpp.s) N
() N
(# Help Target) N
(help:) N
() S 8 T (@echo "The following are some of the valid targets for this Makefile:") N
() S 8 T (@echo "... all \(the default if no target is provided\)") N
() S 8 T (@echo "... clean") N
() S 8 T (@echo "... depend") N
() S 8 T (@echo "... edit_cache") N
() S 8 T (@echo "... rebuild_cache") N
() S 8 T (@echo "... Logger") N
() S 8 T (@echo "... Logger.o") N
() S 8 T (@echo "... Logger.i") N
() S 8 T (@echo "... Logger.s") N
(.PHONY : help) N
() N
() N
() N
(#=============================================================================) N
(# Special targets to cleanup operation of make.) N
() N
(# Special rule to run CMake to check the build system integrity.) N
(# No rule that depends on this can have commands that come from listfiles) N
(# because they might be regenerated.) N
(cmake_check_build_system:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(CMAKE_COMMAND\) -S$\(CMA) N
(KE_SOURCE_DIR\) -B$\(CMAKE_BINARY_DIR\) --check-build-system CMakeFiles/Makefile.cm) N
(ake 0) N
(.PHONY : cmake_check_build_system) N
() N
(---- END OF FILE: /home/henrik/Projekter/AppFramework/build/subprojects/Logger/M) N
(akefile ----) N
() N
(---- START OF FILE: /home/henrik/Projekter/AppFramework/build/subprojects/UiMana) N
(ger/Makefile ----) N
(# CMAKE generated file: DO NOT EDIT!) N
(# Generated by "Unix Makefiles" Generator, CMake Version 3.22) N
() N
(# Default target executed when no arguments are given to make.) N
(default_target: all) N
(.PHONY : default_target) N
() N
(# Allow only one "make -f Makefile2" at a time, but pass parallelism.) N
(.NOTPARALLEL:) N
() N
(#=============================================================================) N
(# Special targets provided by cmake.) N
() N
(# Disable implicit rules so canonical targets will work.) N
(.SUFFIXES:) N
(largefile.txt) (Page 23/75) (dec 10, 23 21:52) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(# Disable VCS-based implicit rules.) N
(% : %,v) N
() N
(# Disable VCS-based implicit rules.) N
(% : RCS/%) N
() N
(# Disable VCS-based implicit rules.) N
(% : RCS/%,v) N
() N
(# Disable VCS-based implicit rules.) N
(% : SCCS/s.%) N
() N
(# Disable VCS-based implicit rules.) N
(% : s.%) N
() N
(.SUFFIXES: .hpux_make_needs_suffix_list) N
() N
(# Command-line flag to silence nested $\(MAKE\).) N
($\(VERBOSE\)MAKESILENT = -s) N
() N
(#Suppress display of executed commands.) N
($\(VERBOSE\).SILENT:) N
() N
(# A target that is always out of date.) N
(cmake_force:) N
(.PHONY : cmake_force) N
() N
(#=============================================================================) N
(# Set environment variables for the build.) N
() N
(# The shell in which to execute make rules.) N
(SHELL = /bin/sh) N
() N
(# The CMake executable.) N
(CMAKE_COMMAND = /usr/bin/cmake) N
() N
(# The command to remove a file.) N
(RM = /usr/bin/cmake -E rm -f) N
() N
(# Escaping for special characters.) N
(EQUALS = =) N
() N
(# The top-level source directory on which CMake was run.) N
(CMAKE_SOURCE_DIR = /home/henrik/Projekter/AppFramework) N
() N
(# The top-level build directory on which CMake was run.) N
(CMAKE_BINARY_DIR = /home/henrik/Projekter/AppFramework/build) N
() N
(#=============================================================================) N
(# Targets provided globally by CMake.) N
() N
(# Special rule for the target edit_cache) N
(edit_cache:) N
() S 8 T (@$\(CMAKE_COMMAND\) -E cmake_echo_color --switch=$\(COLOR\) --cyan "No inter) N
(active CMake dialog available...") N
() S 8 T (/usr/bin/cmake -E echo No\\ interactive\\ CMake\\ dialog\\ available.) N
(.PHONY : edit_cache) N
() N
(# Special rule for the target edit_cache) N
(edit_cache/fast: edit_cache) N
(.PHONY : edit_cache/fast) N
(largefile.txt) (Page 24/75) (dec 10, 23 21:52) title
border
grestore
(Printed by Henrik S\303\270rensen) rhead
(largefile.txt) (12/38) (s\303\270ndag december 10, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (25-26) 13
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(# Special rule for the target rebuild_cache) N
(rebuild_cache:) N
() S 8 T (@$\(CMAKE_COMMAND\) -E cmake_echo_color --switch=$\(COLOR\) --cyan "Running ) N
(CMake to regenerate build system...") N
() S 8 T (/usr/bin/cmake --regenerate-during-build -S$\(CMAKE_SOURCE_DIR\) -B$\(CMAKE) N
(_BINARY_DIR\)) N
(.PHONY : rebuild_cache) N
() N
(# Special rule for the target rebuild_cache) N
(rebuild_cache/fast: rebuild_cache) N
(.PHONY : rebuild_cache/fast) N
() N
(# The main all target) N
(all: cmake_check_build_system) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(CMAKE_COMMAND\) -E cmak) N
(e_progress_start /home/henrik/Projekter/AppFramework/build/CMakeFiles /home/henr) N
(ik/Projekter/AppFramework/build/subprojects/UiManager//CMakeFiles/progress.marks) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( CMakeFiles/Makefile2 subprojects/UiManager/all) N
() S 8 T ($\(CMAKE_COMMAND\) -E cmake_progress_start /home/henrik/Projekter/AppFrame) N
(work/build/CMakeFiles 0) N
(.PHONY : all) N
() N
(# The main clean target) N
(clean:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( CMakeFiles/Makefile2 subprojects/UiManager/clean) N
(.PHONY : clean) N
() N
(# The main clean target) N
(clean/fast: clean) N
(.PHONY : clean/fast) N
() N
(# Prepare targets for installation.) N
(preinstall: all) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( CMakeFiles/Makefile2 subprojects/UiManager/preinstall) N
(.PHONY : preinstall) N
() N
(# Prepare targets for installation.) N
(preinstall/fast:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( CMakeFiles/Makefile2 subprojects/UiManager/preinstall) N
(.PHONY : preinstall/fast) N
() N
(# clear depends) N
(depend:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(CMAKE_COMMAND\) -S$\(CMA) N
(KE_SOURCE_DIR\) -B$\(CMAKE_BINARY_DIR\) --check-build-system CMakeFiles/Makefile.cm) N
(ake 1) N
(.PHONY : depend) N
() N
(# Convenience name for target.) N
(subprojects/UiManager/CMakeFiles/UiManager.dir/rule:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( CMakeFiles/Makefile2 subprojects/UiManager/CMakeFiles/UiManager.dir/rule) N
(.PHONY : subprojects/UiManager/CMakeFiles/UiManager.dir/rule) N
() N
(# Convenience name for target.) N
(UiManager: subprojects/UiManager/CMakeFiles/UiManager.dir/rule) N
(.PHONY : UiManager) N
(largefile.txt) (Page 25/75) (dec 10, 23 21:52) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(# fast build rule for target.) N
(UiManager/fast:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( subprojects/UiManager/CMakeFiles/UiManager.dir/build.make subprojects/UiManager) N
(/CMakeFiles/UiManager.dir/build) N
(.PHONY : UiManager/fast) N
() N
(UiManager.o: UiManager.cpp.o) N
(.PHONY : UiManager.o) N
() N
(# target to build an object file) N
(UiManager.cpp.o:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( subprojects/UiManager/CMakeFiles/UiManager.dir/build.make subprojects/UiManager) N
(/CMakeFiles/UiManager.dir/UiManager.cpp.o) N
(.PHONY : UiManager.cpp.o) N
() N
(UiManager.i: UiManager.cpp.i) N
(.PHONY : UiManager.i) N
() N
(# target to preprocess a source file) N
(UiManager.cpp.i:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( subprojects/UiManager/CMakeFiles/UiManager.dir/build.make subprojects/UiManager) N
(/CMakeFiles/UiManager.dir/UiManager.cpp.i) N
(.PHONY : UiManager.cpp.i) N
() N
(UiManager.s: UiManager.cpp.s) N
(.PHONY : UiManager.s) N
() N
(# target to generate assembly for a file) N
(UiManager.cpp.s:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( subprojects/UiManager/CMakeFiles/UiManager.dir/build.make subprojects/UiManager) N
(/CMakeFiles/UiManager.dir/UiManager.cpp.s) N
(.PHONY : UiManager.cpp.s) N
() N
(# Help Target) N
(help:) N
() S 8 T (@echo "The following are some of the valid targets for this Makefile:") N
() S 8 T (@echo "... all \(the default if no target is provided\)") N
() S 8 T (@echo "... clean") N
() S 8 T (@echo "... depend") N
() S 8 T (@echo "... edit_cache") N
() S 8 T (@echo "... rebuild_cache") N
() S 8 T (@echo "... UiManager") N
() S 8 T (@echo "... UiManager.o") N
() S 8 T (@echo "... UiManager.i") N
() S 8 T (@echo "... UiManager.s") N
(.PHONY : help) N
() N
() N
() N
(#=============================================================================) N
(# Special targets to cleanup operation of make.) N
() N
(# Special rule to run CMake to check the build system integrity.) N
(# No rule that depends on this can have commands that come from listfiles) N
(# because they might be regenerated.) N
(cmake_check_build_system:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(CMAKE_COMMAND\) -S$\(CMA) N
(largefile.txt) (Page 26/75) (dec 10, 23 21:52) title
border
grestore
(Printed by Henrik S\303\270rensen) rhead
(largefile.txt) (13/38) (s\303\270ndag december 10, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (27-28) 14
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(KE_SOURCE_DIR\) -B$\(CMAKE_BINARY_DIR\) --check-build-system CMakeFiles/Makefile.cm) p n
(ake 0) N
(.PHONY : cmake_check_build_system) N
() N
(---- END OF FILE: /home/henrik/Projekter/AppFramework/build/subprojects/UiManage) N
(r/Makefile ----) N
() N
(---- START OF FILE: /home/henrik/Projekter/AppFramework/build/subprojects/EnvVar) N
(/Makefile ----) N
(# CMAKE generated file: DO NOT EDIT!) N
(# Generated by "Unix Makefiles" Generator, CMake Version 3.22) N
() N
(# Default target executed when no arguments are given to make.) N
(default_target: all) N
(.PHONY : default_target) N
() N
(# Allow only one "make -f Makefile2" at a time, but pass parallelism.) N
(.NOTPARALLEL:) N
() N
(#=============================================================================) N
(# Special targets provided by cmake.) N
() N
(# Disable implicit rules so canonical targets will work.) N
(.SUFFIXES:) N
() N
(# Disable VCS-based implicit rules.) N
(% : %,v) N
() N
(# Disable VCS-based implicit rules.) N
(% : RCS/%) N
() N
(# Disable VCS-based implicit rules.) N
(% : RCS/%,v) N
() N
(# Disable VCS-based implicit rules.) N
(% : SCCS/s.%) N
() N
(# Disable VCS-based implicit rules.) N
(% : s.%) N
() N
(.SUFFIXES: .hpux_make_needs_suffix_list) N
() N
(# Command-line flag to silence nested $\(MAKE\).) N
($\(VERBOSE\)MAKESILENT = -s) N
() N
(#Suppress display of executed commands.) N
($\(VERBOSE\).SILENT:) N
() N
(# A target that is always out of date.) N
(cmake_force:) N
(.PHONY : cmake_force) N
() N
(#=============================================================================) N
(# Set environment variables for the build.) N
() N
(# The shell in which to execute make rules.) N
(SHELL = /bin/sh) N
() N
(# The CMake executable.) N
(CMAKE_COMMAND = /usr/bin/cmake) N
() N
(# The command to remove a file.) N
(largefile.txt) (Page 27/75) (dec 10, 23 21:52) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(RM = /usr/bin/cmake -E rm -f) p n
() N
(# Escaping for special characters.) N
(EQUALS = =) N
() N
(# The top-level source directory on which CMake was run.) N
(CMAKE_SOURCE_DIR = /home/henrik/Projekter/AppFramework) N
() N
(# The top-level build directory on which CMake was run.) N
(CMAKE_BINARY_DIR = /home/henrik/Projekter/AppFramework/build) N
() N
(#=============================================================================) N
(# Targets provided globally by CMake.) N
() N
(# Special rule for the target edit_cache) N
(edit_cache:) N
() S 8 T (@$\(CMAKE_COMMAND\) -E cmake_echo_color --switch=$\(COLOR\) --cyan "No inter) N
(active CMake dialog available...") N
() S 8 T (/usr/bin/cmake -E echo No\\ interactive\\ CMake\\ dialog\\ available.) N
(.PHONY : edit_cache) N
() N
(# Special rule for the target edit_cache) N
(edit_cache/fast: edit_cache) N
(.PHONY : edit_cache/fast) N
() N
(# Special rule for the target rebuild_cache) N
(rebuild_cache:) N
() S 8 T (@$\(CMAKE_COMMAND\) -E cmake_echo_color --switch=$\(COLOR\) --cyan "Running ) N
(CMake to regenerate build system...") N
() S 8 T (/usr/bin/cmake --regenerate-during-build -S$\(CMAKE_SOURCE_DIR\) -B$\(CMAKE) N
(_BINARY_DIR\)) N
(.PHONY : rebuild_cache) N
() N
(# Special rule for the target rebuild_cache) N
(rebuild_cache/fast: rebuild_cache) N
(.PHONY : rebuild_cache/fast) N
() N
(# The main all target) N
(all: cmake_check_build_system) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(CMAKE_COMMAND\) -E cmak) N
(e_progress_start /home/henrik/Projekter/AppFramework/build/CMakeFiles /home/henr) N
(ik/Projekter/AppFramework/build/subprojects/EnvVar//CMakeFiles/progress.marks) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( CMakeFiles/Makefile2 subprojects/EnvVar/all) N
() S 8 T ($\(CMAKE_COMMAND\) -E cmake_progress_start /home/henrik/Projekter/AppFrame) N
(work/build/CMakeFiles 0) N
(.PHONY : all) N
() N
(# The main clean target) N
(clean:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( CMakeFiles/Makefile2 subprojects/EnvVar/clean) N
(.PHONY : clean) N
() N
(# The main clean target) N
(clean/fast: clean) N
(.PHONY : clean/fast) N
() N
(# Prepare targets for installation.) N
(preinstall: all) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( CMakeFiles/Makefile2 subprojects/EnvVar/preinstall) N
(largefile.txt) (Page 28/75) (dec 10, 23 21:52) title
border
grestore
(Printed by Henrik S\303\270rensen) rhead
(largefile.txt) (14/38) (s\303\270ndag december 10, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (29-30) 15
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(.PHONY : preinstall) p n
() N
(# Prepare targets for installation.) N
(preinstall/fast:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( CMakeFiles/Makefile2 subprojects/EnvVar/preinstall) N
(.PHONY : preinstall/fast) N
() N
(# clear depends) N
(depend:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(CMAKE_COMMAND\) -S$\(CMA) N
(KE_SOURCE_DIR\) -B$\(CMAKE_BINARY_DIR\) --check-build-system CMakeFiles/Makefile.cm) N
(ake 1) N
(.PHONY : depend) N
() N
(# Convenience name for target.) N
(subprojects/EnvVar/CMakeFiles/EnvVar.dir/rule:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( CMakeFiles/Makefile2 subprojects/EnvVar/CMakeFiles/EnvVar.dir/rule) N
(.PHONY : subprojects/EnvVar/CMakeFiles/EnvVar.dir/rule) N
() N
(# Convenience name for target.) N
(EnvVar: subprojects/EnvVar/CMakeFiles/EnvVar.dir/rule) N
(.PHONY : EnvVar) N
() N
(# fast build rule for target.) N
(EnvVar/fast:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( subprojects/EnvVar/CMakeFiles/EnvVar.dir/build.make subprojects/EnvVar/CMakeFil) N
(es/EnvVar.dir/build) N
(.PHONY : EnvVar/fast) N
() N
(EnvVar.o: EnvVar.cpp.o) N
(.PHONY : EnvVar.o) N
() N
(# target to build an object file) N
(EnvVar.cpp.o:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( subprojects/EnvVar/CMakeFiles/EnvVar.dir/build.make subprojects/EnvVar/CMakeFil) N
(es/EnvVar.dir/EnvVar.cpp.o) N
(.PHONY : EnvVar.cpp.o) N
() N
(EnvVar.i: EnvVar.cpp.i) N
(.PHONY : EnvVar.i) N
() N
(# target to preprocess a source file) N
(EnvVar.cpp.i:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( subprojects/EnvVar/CMakeFiles/EnvVar.dir/build.make subprojects/EnvVar/CMakeFil) N
(es/EnvVar.dir/EnvVar.cpp.i) N
(.PHONY : EnvVar.cpp.i) N
() N
(EnvVar.s: EnvVar.cpp.s) N
(.PHONY : EnvVar.s) N
() N
(# target to generate assembly for a file) N
(EnvVar.cpp.s:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( subprojects/EnvVar/CMakeFiles/EnvVar.dir/build.make subprojects/EnvVar/CMakeFil) N
(es/EnvVar.dir/EnvVar.cpp.s) N
(.PHONY : EnvVar.cpp.s) N
() N
(largefile.txt) (Page 29/75) (dec 10, 23 21:52) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(# Help Target) p n
(help:) N
() S 8 T (@echo "The following are some of the valid targets for this Makefile:") N
() S 8 T (@echo "... all \(the default if no target is provided\)") N
() S 8 T (@echo "... clean") N
() S 8 T (@echo "... depend") N
() S 8 T (@echo "... edit_cache") N
() S 8 T (@echo "... rebuild_cache") N
() S 8 T (@echo "... EnvVar") N
() S 8 T (@echo "... EnvVar.o") N
() S 8 T (@echo "... EnvVar.i") N
() S 8 T (@echo "... EnvVar.s") N
(.PHONY : help) N
() N
() N
() N
(#=============================================================================) N
(# Special targets to cleanup operation of make.) N
() N
(# Special rule to run CMake to check the build system integrity.) N
(# No rule that depends on this can have commands that come from listfiles) N
(# because they might be regenerated.) N
(cmake_check_build_system:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(CMAKE_COMMAND\) -S$\(CMA) N
(KE_SOURCE_DIR\) -B$\(CMAKE_BINARY_DIR\) --check-build-system CMakeFiles/Makefile.cm) N
(ake 0) N
(.PHONY : cmake_check_build_system) N
() N
(---- END OF FILE: /home/henrik/Projekter/AppFramework/build/subprojects/EnvVar/M) N
(akefile ----) N
() N
(---- START OF FILE: /home/henrik/Projekter/AppFramework/build/subprojects/TimeUt) N
(ils/Makefile ----) N
(# CMAKE generated file: DO NOT EDIT!) N
(# Generated by "Unix Makefiles" Generator, CMake Version 3.22) N
() N
(# Default target executed when no arguments are given to make.) N
(default_target: all) N
(.PHONY : default_target) N
() N
(# Allow only one "make -f Makefile2" at a time, but pass parallelism.) N
(.NOTPARALLEL:) N
() N
(#=============================================================================) N
(# Special targets provided by cmake.) N
() N
(# Disable implicit rules so canonical targets will work.) N
(.SUFFIXES:) N
() N
(# Disable VCS-based implicit rules.) N
(% : %,v) N
() N
(# Disable VCS-based implicit rules.) N
(% : RCS/%) N
() N
(# Disable VCS-based implicit rules.) N
(% : RCS/%,v) N
() N
(# Disable VCS-based implicit rules.) N
(% : SCCS/s.%) N
() N
(# Disable VCS-based implicit rules.) N
(largefile.txt) (Page 30/75) (dec 10, 23 21:52) title
border
grestore
(Printed by Henrik S\303\270rensen) rhead
(largefile.txt) (15/38) (s\303\270ndag december 10, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (31-32) 16
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(% : s.%) p n
() N
(.SUFFIXES: .hpux_make_needs_suffix_list) N
() N
(# Command-line flag to silence nested $\(MAKE\).) N
($\(VERBOSE\)MAKESILENT = -s) N
() N
(#Suppress display of executed commands.) N
($\(VERBOSE\).SILENT:) N
() N
(# A target that is always out of date.) N
(cmake_force:) N
(.PHONY : cmake_force) N
() N
(#=============================================================================) N
(# Set environment variables for the build.) N
() N
(# The shell in which to execute make rules.) N
(SHELL = /bin/sh) N
() N
(# The CMake executable.) N
(CMAKE_COMMAND = /usr/bin/cmake) N
() N
(# The command to remove a file.) N
(RM = /usr/bin/cmake -E rm -f) N
() N
(# Escaping for special characters.) N
(EQUALS = =) N
() N
(# The top-level source directory on which CMake was run.) N
(CMAKE_SOURCE_DIR = /home/henrik/Projekter/AppFramework) N
() N
(# The top-level build directory on which CMake was run.) N
(CMAKE_BINARY_DIR = /home/henrik/Projekter/AppFramework/build) N
() N
(#=============================================================================) N
(# Targets provided globally by CMake.) N
() N
(# Special rule for the target edit_cache) N
(edit_cache:) N
() S 8 T (@$\(CMAKE_COMMAND\) -E cmake_echo_color --switch=$\(COLOR\) --cyan "No inter) N
(active CMake dialog available...") N
() S 8 T (/usr/bin/cmake -E echo No\\ interactive\\ CMake\\ dialog\\ available.) N
(.PHONY : edit_cache) N
() N
(# Special rule for the target edit_cache) N
(edit_cache/fast: edit_cache) N
(.PHONY : edit_cache/fast) N
() N
(# Special rule for the target rebuild_cache) N
(rebuild_cache:) N
() S 8 T (@$\(CMAKE_COMMAND\) -E cmake_echo_color --switch=$\(COLOR\) --cyan "Running ) N
(CMake to regenerate build system...") N
() S 8 T (/usr/bin/cmake --regenerate-during-build -S$\(CMAKE_SOURCE_DIR\) -B$\(CMAKE) N
(_BINARY_DIR\)) N
(.PHONY : rebuild_cache) N
() N
(# Special rule for the target rebuild_cache) N
(rebuild_cache/fast: rebuild_cache) N
(.PHONY : rebuild_cache/fast) N
() N
(# The main all target) N
(largefile.txt) (Page 31/75) (dec 10, 23 21:52) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(all: cmake_check_build_system) p n
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(CMAKE_COMMAND\) -E cmak) N
(e_progress_start /home/henrik/Projekter/AppFramework/build/CMakeFiles /home/henr) N
(ik/Projekter/AppFramework/build/subprojects/TimeUtils//CMakeFiles/progress.marks) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( CMakeFiles/Makefile2 subprojects/TimeUtils/all) N
() S 8 T ($\(CMAKE_COMMAND\) -E cmake_progress_start /home/henrik/Projekter/AppFrame) N
(work/build/CMakeFiles 0) N
(.PHONY : all) N
() N
(# The main clean target) N
(clean:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( CMakeFiles/Makefile2 subprojects/TimeUtils/clean) N
(.PHONY : clean) N
() N
(# The main clean target) N
(clean/fast: clean) N
(.PHONY : clean/fast) N
() N
(# Prepare targets for installation.) N
(preinstall: all) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( CMakeFiles/Makefile2 subprojects/TimeUtils/preinstall) N
(.PHONY : preinstall) N
() N
(# Prepare targets for installation.) N
(preinstall/fast:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( CMakeFiles/Makefile2 subprojects/TimeUtils/preinstall) N
(.PHONY : preinstall/fast) N
() N
(# clear depends) N
(depend:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(CMAKE_COMMAND\) -S$\(CMA) N
(KE_SOURCE_DIR\) -B$\(CMAKE_BINARY_DIR\) --check-build-system CMakeFiles/Makefile.cm) N
(ake 1) N
(.PHONY : depend) N
() N
(# Convenience name for target.) N
(subprojects/TimeUtils/CMakeFiles/TimeUtils.dir/rule:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( CMakeFiles/Makefile2 subprojects/TimeUtils/CMakeFiles/TimeUtils.dir/rule) N
(.PHONY : subprojects/TimeUtils/CMakeFiles/TimeUtils.dir/rule) N
() N
(# Convenience name for target.) N
(TimeUtils: subprojects/TimeUtils/CMakeFiles/TimeUtils.dir/rule) N
(.PHONY : TimeUtils) N
() N
(# fast build rule for target.) N
(TimeUtils/fast:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( subprojects/TimeUtils/CMakeFiles/TimeUtils.dir/build.make subprojects/TimeUtils) N
(/CMakeFiles/TimeUtils.dir/build) N
(.PHONY : TimeUtils/fast) N
() N
(TimeUtils.o: TimeUtils.cpp.o) N
(.PHONY : TimeUtils.o) N
() N
(# target to build an object file) N
(TimeUtils.cpp.o:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
(largefile.txt) (Page 32/75) (dec 10, 23 21:52) title
border
grestore
(Printed by Henrik S\303\270rensen) rhead
(largefile.txt) (16/38) (s\303\270ndag december 10, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (33-34) 17
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
( subprojects/TimeUtils/CMakeFiles/TimeUtils.dir/build.make subprojects/TimeUtils) p n
(/CMakeFiles/TimeUtils.dir/TimeUtils.cpp.o) N
(.PHONY : TimeUtils.cpp.o) N
() N
(TimeUtils.i: TimeUtils.cpp.i) N
(.PHONY : TimeUtils.i) N
() N
(# target to preprocess a source file) N
(TimeUtils.cpp.i:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( subprojects/TimeUtils/CMakeFiles/TimeUtils.dir/build.make subprojects/TimeUtils) N
(/CMakeFiles/TimeUtils.dir/TimeUtils.cpp.i) N
(.PHONY : TimeUtils.cpp.i) N
() N
(TimeUtils.s: TimeUtils.cpp.s) N
(.PHONY : TimeUtils.s) N
() N
(# target to generate assembly for a file) N
(TimeUtils.cpp.s:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( subprojects/TimeUtils/CMakeFiles/TimeUtils.dir/build.make subprojects/TimeUtils) N
(/CMakeFiles/TimeUtils.dir/TimeUtils.cpp.s) N
(.PHONY : TimeUtils.cpp.s) N
() N
(# Help Target) N
(help:) N
() S 8 T (@echo "The following are some of the valid targets for this Makefile:") N
() S 8 T (@echo "... all \(the default if no target is provided\)") N
() S 8 T (@echo "... clean") N
() S 8 T (@echo "... depend") N
() S 8 T (@echo "... edit_cache") N
() S 8 T (@echo "... rebuild_cache") N
() S 8 T (@echo "... TimeUtils") N
() S 8 T (@echo "... TimeUtils.o") N
() S 8 T (@echo "... TimeUtils.i") N
() S 8 T (@echo "... TimeUtils.s") N
(.PHONY : help) N
() N
() N
() N
(#=============================================================================) N
(# Special targets to cleanup operation of make.) N
() N
(# Special rule to run CMake to check the build system integrity.) N
(# No rule that depends on this can have commands that come from listfiles) N
(# because they might be regenerated.) N
(cmake_check_build_system:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(CMAKE_COMMAND\) -S$\(CMA) N
(KE_SOURCE_DIR\) -B$\(CMAKE_BINARY_DIR\) --check-build-system CMakeFiles/Makefile.cm) N
(ake 0) N
(.PHONY : cmake_check_build_system) N
() N
(---- END OF FILE: /home/henrik/Projekter/AppFramework/build/subprojects/TimeUtil) N
(s/Makefile ----) N
() N
(---- START OF FILE: /home/henrik/Projekter/AppFramework/build/subprojects/String) N
(Utils/Makefile ----) N
(# CMAKE generated file: DO NOT EDIT!) N
(# Generated by "Unix Makefiles" Generator, CMake Version 3.22) N
() N
(# Default target executed when no arguments are given to make.) N
(default_target: all) N
(largefile.txt) (Page 33/75) (dec 10, 23 21:52) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(.PHONY : default_target) p n
() N
(# Allow only one "make -f Makefile2" at a time, but pass parallelism.) N
(.NOTPARALLEL:) N
() N
(#=============================================================================) N
(# Special targets provided by cmake.) N
() N
(# Disable implicit rules so canonical targets will work.) N
(.SUFFIXES:) N
() N
(# Disable VCS-based implicit rules.) N
(% : %,v) N
() N
(# Disable VCS-based implicit rules.) N
(% : RCS/%) N
() N
(# Disable VCS-based implicit rules.) N
(% : RCS/%,v) N
() N
(# Disable VCS-based implicit rules.) N
(% : SCCS/s.%) N
() N
(# Disable VCS-based implicit rules.) N
(% : s.%) N
() N
(.SUFFIXES: .hpux_make_needs_suffix_list) N
() N
(# Command-line flag to silence nested $\(MAKE\).) N
($\(VERBOSE\)MAKESILENT = -s) N
() N
(#Suppress display of executed commands.) N
($\(VERBOSE\).SILENT:) N
() N
(# A target that is always out of date.) N
(cmake_force:) N
(.PHONY : cmake_force) N
() N
(#=============================================================================) N
(# Set environment variables for the build.) N
() N
(# The shell in which to execute make rules.) N
(SHELL = /bin/sh) N
() N
(# The CMake executable.) N
(CMAKE_COMMAND = /usr/bin/cmake) N
() N
(# The command to remove a file.) N
(RM = /usr/bin/cmake -E rm -f) N
() N
(# Escaping for special characters.) N
(EQUALS = =) N
() N
(# The top-level source directory on which CMake was run.) N
(CMAKE_SOURCE_DIR = /home/henrik/Projekter/AppFramework) N
() N
(# The top-level build directory on which CMake was run.) N
(CMAKE_BINARY_DIR = /home/henrik/Projekter/AppFramework/build) N
() N
(#=============================================================================) N
(# Targets provided globally by CMake.) N
() N
(largefile.txt) (Page 34/75) (dec 10, 23 21:52) title
border
grestore
(Printed by Henrik S\303\270rensen) rhead
(largefile.txt) (17/38) (s\303\270ndag december 10, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (35-36) 18
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(# Special rule for the target edit_cache) p n
(edit_cache:) N
() S 8 T (@$\(CMAKE_COMMAND\) -E cmake_echo_color --switch=$\(COLOR\) --cyan "No inter) N
(active CMake dialog available...") N
() S 8 T (/usr/bin/cmake -E echo No\\ interactive\\ CMake\\ dialog\\ available.) N
(.PHONY : edit_cache) N
() N
(# Special rule for the target edit_cache) N
(edit_cache/fast: edit_cache) N
(.PHONY : edit_cache/fast) N
() N
(# Special rule for the target rebuild_cache) N
(rebuild_cache:) N
() S 8 T (@$\(CMAKE_COMMAND\) -E cmake_echo_color --switch=$\(COLOR\) --cyan "Running ) N
(CMake to regenerate build system...") N
() S 8 T (/usr/bin/cmake --regenerate-during-build -S$\(CMAKE_SOURCE_DIR\) -B$\(CMAKE) N
(_BINARY_DIR\)) N
(.PHONY : rebuild_cache) N
() N
(# Special rule for the target rebuild_cache) N
(rebuild_cache/fast: rebuild_cache) N
(.PHONY : rebuild_cache/fast) N
() N
(# The main all target) N
(all: cmake_check_build_system) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(CMAKE_COMMAND\) -E cmak) N
(e_progress_start /home/henrik/Projekter/AppFramework/build/CMakeFiles /home/henr) N
(ik/Projekter/AppFramework/build/subprojects/StringUtils//CMakeFiles/progress.mar) N
(ks) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( CMakeFiles/Makefile2 subprojects/StringUtils/all) N
() S 8 T ($\(CMAKE_COMMAND\) -E cmake_progress_start /home/henrik/Projekter/AppFrame) N
(work/build/CMakeFiles 0) N
(.PHONY : all) N
() N
(# The main clean target) N
(clean:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( CMakeFiles/Makefile2 subprojects/StringUtils/clean) N
(.PHONY : clean) N
() N
(# The main clean target) N
(clean/fast: clean) N
(.PHONY : clean/fast) N
() N
(# Prepare targets for installation.) N
(preinstall: all) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( CMakeFiles/Makefile2 subprojects/StringUtils/preinstall) N
(.PHONY : preinstall) N
() N
(# Prepare targets for installation.) N
(preinstall/fast:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( CMakeFiles/Makefile2 subprojects/StringUtils/preinstall) N
(.PHONY : preinstall/fast) N
() N
(# clear depends) N
(depend:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(CMAKE_COMMAND\) -S$\(CMA) N
(KE_SOURCE_DIR\) -B$\(CMAKE_BINARY_DIR\) --check-build-system CMakeFiles/Makefile.cm) N
(ake 1) N
(largefile.txt) (Page 35/75) (dec 10, 23 21:52) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(.PHONY : depend) p n
() N
(# Convenience name for target.) N
(subprojects/StringUtils/CMakeFiles/StringUtils.dir/rule:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( CMakeFiles/Makefile2 subprojects/StringUtils/CMakeFiles/StringUtils.dir/rule) N
(.PHONY : subprojects/StringUtils/CMakeFiles/StringUtils.dir/rule) N
() N
(# Convenience name for target.) N
(StringUtils: subprojects/StringUtils/CMakeFiles/StringUtils.dir/rule) N
(.PHONY : StringUtils) N
() N
(# fast build rule for target.) N
(StringUtils/fast:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( subprojects/StringUtils/CMakeFiles/StringUtils.dir/build.make subprojects/Strin) N
(gUtils/CMakeFiles/StringUtils.dir/build) N
(.PHONY : StringUtils/fast) N
() N
(StringUtils.o: StringUtils.cpp.o) N
(.PHONY : StringUtils.o) N
() N
(# target to build an object file) N
(StringUtils.cpp.o:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( subprojects/StringUtils/CMakeFiles/StringUtils.dir/build.make subprojects/Strin) N
(gUtils/CMakeFiles/StringUtils.dir/StringUtils.cpp.o) N
(.PHONY : StringUtils.cpp.o) N
() N
(StringUtils.i: StringUtils.cpp.i) N
(.PHONY : StringUtils.i) N
() N
(# target to preprocess a source file) N
(StringUtils.cpp.i:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( subprojects/StringUtils/CMakeFiles/StringUtils.dir/build.make subprojects/Strin) N
(gUtils/CMakeFiles/StringUtils.dir/StringUtils.cpp.i) N
(.PHONY : StringUtils.cpp.i) N
() N
(StringUtils.s: StringUtils.cpp.s) N
(.PHONY : StringUtils.s) N
() N
(# target to generate assembly for a file) N
(StringUtils.cpp.s:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( subprojects/StringUtils/CMakeFiles/StringUtils.dir/build.make subprojects/Strin) N
(gUtils/CMakeFiles/StringUtils.dir/StringUtils.cpp.s) N
(.PHONY : StringUtils.cpp.s) N
() N
(# Help Target) N
(help:) N
() S 8 T (@echo "The following are some of the valid targets for this Makefile:") N
() S 8 T (@echo "... all \(the default if no target is provided\)") N
() S 8 T (@echo "... clean") N
() S 8 T (@echo "... depend") N
() S 8 T (@echo "... edit_cache") N
() S 8 T (@echo "... rebuild_cache") N
() S 8 T (@echo "... StringUtils") N
() S 8 T (@echo "... StringUtils.o") N
() S 8 T (@echo "... StringUtils.i") N
() S 8 T (@echo "... StringUtils.s") N
(.PHONY : help) N
(largefile.txt) (Page 36/75) (dec 10, 23 21:52) title
border
grestore
(Printed by Henrik S\303\270rensen) rhead
(largefile.txt) (18/38) (s\303\270ndag december 10, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (37-38) 19
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
() N
() N
(#=============================================================================) N
(# Special targets to cleanup operation of make.) N
() N
(# Special rule to run CMake to check the build system integrity.) N
(# No rule that depends on this can have commands that come from listfiles) N
(# because they might be regenerated.) N
(cmake_check_build_system:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(CMAKE_COMMAND\) -S$\(CMA) N
(KE_SOURCE_DIR\) -B$\(CMAKE_BINARY_DIR\) --check-build-system CMakeFiles/Makefile.cm) N
(ake 0) N
(.PHONY : cmake_check_build_system) N
() N
(---- END OF FILE: /home/henrik/Projekter/AppFramework/build/subprojects/StringUt) N
(ils/Makefile ----) N
() N
(---- START OF FILE: /home/henrik/Projekter/AppFramework/build/subprojects/Comman) N
(dLineProcessor/Makefile ----) N
(# CMAKE generated file: DO NOT EDIT!) N
(# Generated by "Unix Makefiles" Generator, CMake Version 3.22) N
() N
(# Default target executed when no arguments are given to make.) N
(default_target: all) N
(.PHONY : default_target) N
() N
(# Allow only one "make -f Makefile2" at a time, but pass parallelism.) N
(.NOTPARALLEL:) N
() N
(#=============================================================================) N
(# Special targets provided by cmake.) N
() N
(# Disable implicit rules so canonical targets will work.) N
(.SUFFIXES:) N
() N
(# Disable VCS-based implicit rules.) N
(% : %,v) N
() N
(# Disable VCS-based implicit rules.) N
(% : RCS/%) N
() N
(# Disable VCS-based implicit rules.) N
(% : RCS/%,v) N
() N
(# Disable VCS-based implicit rules.) N
(% : SCCS/s.%) N
() N
(# Disable VCS-based implicit rules.) N
(% : s.%) N
() N
(.SUFFIXES: .hpux_make_needs_suffix_list) N
() N
(# Command-line flag to silence nested $\(MAKE\).) N
($\(VERBOSE\)MAKESILENT = -s) N
() N
(#Suppress display of executed commands.) N
($\(VERBOSE\).SILENT:) N
() N
(# A target that is always out of date.) N
(cmake_force:) N
(.PHONY : cmake_force) N
(largefile.txt) (Page 37/75) (dec 10, 23 21:52) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(#=============================================================================) N
(# Set environment variables for the build.) N
() N
(# The shell in which to execute make rules.) N
(SHELL = /bin/sh) N
() N
(# The CMake executable.) N
(CMAKE_COMMAND = /usr/bin/cmake) N
() N
(# The command to remove a file.) N
(RM = /usr/bin/cmake -E rm -f) N
() N
(# Escaping for special characters.) N
(EQUALS = =) N
() N
(# The top-level source directory on which CMake was run.) N
(CMAKE_SOURCE_DIR = /home/henrik/Projekter/AppFramework) N
() N
(# The top-level build directory on which CMake was run.) N
(CMAKE_BINARY_DIR = /home/henrik/Projekter/AppFramework/build) N
() N
(#=============================================================================) N
(# Targets provided globally by CMake.) N
() N
(# Special rule for the target edit_cache) N
(edit_cache:) N
() S 8 T (@$\(CMAKE_COMMAND\) -E cmake_echo_color --switch=$\(COLOR\) --cyan "No inter) N
(active CMake dialog available...") N
() S 8 T (/usr/bin/cmake -E echo No\\ interactive\\ CMake\\ dialog\\ available.) N
(.PHONY : edit_cache) N
() N
(# Special rule for the target edit_cache) N
(edit_cache/fast: edit_cache) N
(.PHONY : edit_cache/fast) N
() N
(# Special rule for the target rebuild_cache) N
(rebuild_cache:) N
() S 8 T (@$\(CMAKE_COMMAND\) -E cmake_echo_color --switch=$\(COLOR\) --cyan "Running ) N
(CMake to regenerate build system...") N
() S 8 T (/usr/bin/cmake --regenerate-during-build -S$\(CMAKE_SOURCE_DIR\) -B$\(CMAKE) N
(_BINARY_DIR\)) N
(.PHONY : rebuild_cache) N
() N
(# Special rule for the target rebuild_cache) N
(rebuild_cache/fast: rebuild_cache) N
(.PHONY : rebuild_cache/fast) N
() N
(# The main all target) N
(all: cmake_check_build_system) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(CMAKE_COMMAND\) -E cmak) N
(e_progress_start /home/henrik/Projekter/AppFramework/build/CMakeFiles /home/henr) N
(ik/Projekter/AppFramework/build/subprojects/CommandLineProcessor//CMakeFiles/pro) N
(gress.marks) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( CMakeFiles/Makefile2 subprojects/CommandLineProcessor/all) N
() S 8 T ($\(CMAKE_COMMAND\) -E cmake_progress_start /home/henrik/Projekter/AppFrame) N
(work/build/CMakeFiles 0) N
(.PHONY : all) N
() N
(# The main clean target) N
(clean:) N
(largefile.txt) (Page 38/75) (dec 10, 23 21:52) title
border
grestore
(Printed by Henrik S\303\270rensen) rhead
(largefile.txt) (19/38) (s\303\270ndag december 10, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (39-40) 20
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( CMakeFiles/Makefile2 subprojects/CommandLineProcessor/clean) N
(.PHONY : clean) N
() N
(# The main clean target) N
(clean/fast: clean) N
(.PHONY : clean/fast) N
() N
(# Prepare targets for installation.) N
(preinstall: all) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( CMakeFiles/Makefile2 subprojects/CommandLineProcessor/preinstall) N
(.PHONY : preinstall) N
() N
(# Prepare targets for installation.) N
(preinstall/fast:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( CMakeFiles/Makefile2 subprojects/CommandLineProcessor/preinstall) N
(.PHONY : preinstall/fast) N
() N
(# clear depends) N
(depend:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(CMAKE_COMMAND\) -S$\(CMA) N
(KE_SOURCE_DIR\) -B$\(CMAKE_BINARY_DIR\) --check-build-system CMakeFiles/Makefile.cm) N
(ake 1) N
(.PHONY : depend) N
() N
(# Convenience name for target.) N
(subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/rule:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( CMakeFiles/Makefile2 subprojects/CommandLineProcessor/CMakeFiles/CommandLinePro) N
(cessor.dir/rule) N
(.PHONY : subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/ru) N
(le) N
() N
(# Convenience name for target.) N
(CommandLineProcessor: subprojects/CommandLineProcessor/CMakeFiles/CommandLinePro) N
(cessor.dir/rule) N
(.PHONY : CommandLineProcessor) N
() N
(# fast build rule for target.) N
(CommandLineProcessor/fast:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/build.make) N
( subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/build) N
(.PHONY : CommandLineProcessor/fast) N
() N
(Argument.o: Argument.cpp.o) N
(.PHONY : Argument.o) N
() N
(# target to build an object file) N
(Argument.cpp.o:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/build.make) N
( subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/Argument.c) N
(pp.o) N
(.PHONY : Argument.cpp.o) N
() N
(Argument.i: Argument.cpp.i) N
(.PHONY : Argument.i) N
() N
(# target to preprocess a source file) N
(largefile.txt) (Page 39/75) (dec 10, 23 21:52) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(Argument.cpp.i:) p n
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/build.make) N
( subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/Argument.c) N
(pp.i) N
(.PHONY : Argument.cpp.i) N
() N
(Argument.s: Argument.cpp.s) N
(.PHONY : Argument.s) N
() N
(# target to generate assembly for a file) N
(Argument.cpp.s:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/build.make) N
( subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/Argument.c) N
(pp.s) N
(.PHONY : Argument.cpp.s) N
() N
(ArgumentConfig.o: ArgumentConfig.cpp.o) N
(.PHONY : ArgumentConfig.o) N
() N
(# target to build an object file) N
(ArgumentConfig.cpp.o:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/build.make) N
( subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/ArgumentCo) N
(nfig.cpp.o) N
(.PHONY : ArgumentConfig.cpp.o) N
() N
(ArgumentConfig.i: ArgumentConfig.cpp.i) N
(.PHONY : ArgumentConfig.i) N
() N
(# target to preprocess a source file) N
(ArgumentConfig.cpp.i:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/build.make) N
( subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/ArgumentCo) N
(nfig.cpp.i) N
(.PHONY : ArgumentConfig.cpp.i) N
() N
(ArgumentConfig.s: ArgumentConfig.cpp.s) N
(.PHONY : ArgumentConfig.s) N
() N
(# target to generate assembly for a file) N
(ArgumentConfig.cpp.s:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/build.make) N
( subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/ArgumentCo) N
(nfig.cpp.s) N
(.PHONY : ArgumentConfig.cpp.s) N
() N
(Arguments.o: Arguments.cpp.o) N
(.PHONY : Arguments.o) N
() N
(# target to build an object file) N
(Arguments.cpp.o:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/build.make) N
( subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/Arguments.) N
(cpp.o) N
(.PHONY : Arguments.cpp.o) N
() N
(largefile.txt) (Page 40/75) (dec 10, 23 21:52) title
border
grestore
(Printed by Henrik S\303\270rensen) rhead
(largefile.txt) (20/38) (s\303\270ndag december 10, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (41-42) 21
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(Arguments.i: Arguments.cpp.i) p n
(.PHONY : Arguments.i) N
() N
(# target to preprocess a source file) N
(Arguments.cpp.i:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/build.make) N
( subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/Arguments.) N
(cpp.i) N
(.PHONY : Arguments.cpp.i) N
() N
(Arguments.s: Arguments.cpp.s) N
(.PHONY : Arguments.s) N
() N
(# target to generate assembly for a file) N
(Arguments.cpp.s:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/build.make) N
( subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/Arguments.) N
(cpp.s) N
(.PHONY : Arguments.cpp.s) N
() N
(CommandLineProcessor.o: CommandLineProcessor.cpp.o) N
(.PHONY : CommandLineProcessor.o) N
() N
(# target to build an object file) N
(CommandLineProcessor.cpp.o:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/build.make) N
( subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/CommandLin) N
(eProcessor.cpp.o) N
(.PHONY : CommandLineProcessor.cpp.o) N
() N
(CommandLineProcessor.i: CommandLineProcessor.cpp.i) N
(.PHONY : CommandLineProcessor.i) N
() N
(# target to preprocess a source file) N
(CommandLineProcessor.cpp.i:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/build.make) N
( subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/CommandLin) N
(eProcessor.cpp.i) N
(.PHONY : CommandLineProcessor.cpp.i) N
() N
(CommandLineProcessor.s: CommandLineProcessor.cpp.s) N
(.PHONY : CommandLineProcessor.s) N
() N
(# target to generate assembly for a file) N
(CommandLineProcessor.cpp.s:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/build.make) N
( subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/CommandLin) N
(eProcessor.cpp.s) N
(.PHONY : CommandLineProcessor.cpp.s) N
() N
(ConfigManager.o: ConfigManager.cpp.o) N
(.PHONY : ConfigManager.o) N
() N
(# target to build an object file) N
(ConfigManager.cpp.o:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/build.make) N
(largefile.txt) (Page 41/75) (dec 10, 23 21:52) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
( subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/ConfigMana) p n
(ger.cpp.o) N
(.PHONY : ConfigManager.cpp.o) N
() N
(ConfigManager.i: ConfigManager.cpp.i) N
(.PHONY : ConfigManager.i) N
() N
(# target to preprocess a source file) N
(ConfigManager.cpp.i:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/build.make) N
( subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/ConfigMana) N
(ger.cpp.i) N
(.PHONY : ConfigManager.cpp.i) N
() N
(ConfigManager.s: ConfigManager.cpp.s) N
(.PHONY : ConfigManager.s) N
() N
(# target to generate assembly for a file) N
(ConfigManager.cpp.s:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/build.make) N
( subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/ConfigMana) N
(ger.cpp.s) N
(.PHONY : ConfigManager.cpp.s) N
() N
(DefaultSettings.o: DefaultSettings.cpp.o) N
(.PHONY : DefaultSettings.o) N
() N
(# target to build an object file) N
(DefaultSettings.cpp.o:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/build.make) N
( subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/DefaultSet) N
(tings.cpp.o) N
(.PHONY : DefaultSettings.cpp.o) N
() N
(DefaultSettings.i: DefaultSettings.cpp.i) N
(.PHONY : DefaultSettings.i) N
() N
(# target to preprocess a source file) N
(DefaultSettings.cpp.i:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/build.make) N
( subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/DefaultSet) N
(tings.cpp.i) N
(.PHONY : DefaultSettings.cpp.i) N
() N
(DefaultSettings.s: DefaultSettings.cpp.s) N
(.PHONY : DefaultSettings.s) N
() N
(# target to generate assembly for a file) N
(DefaultSettings.cpp.s:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(MAKE\) $\(MAKESILENT\) -f) N
( subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/build.make) N
( subprojects/CommandLineProcessor/CMakeFiles/CommandLineProcessor.dir/DefaultSet) N
(tings.cpp.s) N
(.PHONY : DefaultSettings.cpp.s) N
() N
(# Help Target) N
(help:) N
() S 8 T (@echo "The following are some of the valid targets for this Makefile:") N
(largefile.txt) (Page 42/75) (dec 10, 23 21:52) title
border
grestore
(Printed by Henrik S\303\270rensen) rhead
(largefile.txt) (21/38) (s\303\270ndag december 10, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (43-44) 22
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (@echo "... all \(the default if no target is provided\)") N
() S 8 T (@echo "... clean") N
() S 8 T (@echo "... depend") N
() S 8 T (@echo "... edit_cache") N
() S 8 T (@echo "... rebuild_cache") N
() S 8 T (@echo "... CommandLineProcessor") N
() S 8 T (@echo "... Argument.o") N
() S 8 T (@echo "... Argument.i") N
() S 8 T (@echo "... Argument.s") N
() S 8 T (@echo "... ArgumentConfig.o") N
() S 8 T (@echo "... ArgumentConfig.i") N
() S 8 T (@echo "... ArgumentConfig.s") N
() S 8 T (@echo "... Arguments.o") N
() S 8 T (@echo "... Arguments.i") N
() S 8 T (@echo "... Arguments.s") N
() S 8 T (@echo "... CommandLineProcessor.o") N
() S 8 T (@echo "... CommandLineProcessor.i") N
() S 8 T (@echo "... CommandLineProcessor.s") N
() S 8 T (@echo "... ConfigManager.o") N
() S 8 T (@echo "... ConfigManager.i") N
() S 8 T (@echo "... ConfigManager.s") N
() S 8 T (@echo "... DefaultSettings.o") N
() S 8 T (@echo "... DefaultSettings.i") N
() S 8 T (@echo "... DefaultSettings.s") N
(.PHONY : help) N
() N
() N
() N
(#=============================================================================) N
(# Special targets to cleanup operation of make.) N
() N
(# Special rule to run CMake to check the build system integrity.) N
(# No rule that depends on this can have commands that come from listfiles) N
(# because they might be regenerated.) N
(cmake_check_build_system:) N
() S 8 T (cd /home/henrik/Projekter/AppFramework/build && $\(CMAKE_COMMAND\) -S$\(CMA) N
(KE_SOURCE_DIR\) -B$\(CMAKE_BINARY_DIR\) --check-build-system CMakeFiles/Makefile.cm) N
(ake 0) N
(.PHONY : cmake_check_build_system) N
() N
(---- END OF FILE: /home/henrik/Projekter/AppFramework/build/subprojects/CommandL) N
(ineProcessor/Makefile ----) N
() N
(---- START OF FILE: /home/henrik/Projekter/AppFramework/CMakeLists.txt ----) N
(#) N
(#  This file is part of the AppFramework project.) N
(#) N
(#  AppFramework is free software: you can redistribute it and/or modify) N
(#  it under the terms of the GNU General Public License as published by) N
(#  the Free Software Foundation, GPL version 4.) N
(#) N
(#  AppFramework is distributed in the hope that it will be useful,) N
(#  but WITHOUT ANY WARRANTY; without even the implied warranty of) N
(#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the) N
(#  GNU General Public License version 4 for more details.) N
(#) N
(#  You should have received a copy of the GNU General Public License) N
(#  along with AppFramework. If not, see <https://www.gnu.org/licenses/>.) N
() N
(cmake_minimum_required\(VERSION 3.10\)) N
(project\(testing VERSION 1.0\)) N
(set\(CMAKE_BUILD_TYPE Debug\)) N
(largefile.txt) (Page 43/75) (dec 10, 23 21:52) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(set\(CMAKE_CXX_STANDARD 17\)) p n
(set\(CMAKE_CXX_STANDARD_REQUIRED True\)) N
(set\(CMAKE_BUILD_PARALLEL_LEVEL 5\)) N
() N
(include_directories\(include\)) N
() N
() N
() N
(# Include subprojects) N
(add_subdirectory\(subprojects/TimeUtils\)) N
(add_subdirectory\(subprojects/StringUtils\)) N
(add_subdirectory\(subprojects/Logger\)) N
(add_subdirectory\(subprojects/EnvVar\)) N
(add_subdirectory\(subprojects/UiManager\)) N
(add_subdirectory\(subprojects/CommandLineProcessor\)) N
() N
(option\(THREAD_SAFE "Enable thread safety" OFF\)) N
(if\(THREAD_SAFE\)) N
(    add_compile_definitions\(THREAD_SAFE\)) N
(endif\(\)) N
() N
(option\(ENABLE_DEBUG "Enable debugging messages in output" ON\)) N
(if\(ENABLE_DEBUG\)) N
(    add_compile_definitions\(ENABLE_DEBUG\)) N
(endif\(\)) N
() N
() N
(# Find the nlohmann/json package) N
() N
(find_package\(nlohmann_json REQUIRED\)) N
() N
(# List of source files) N
() N
(set\(SOURCES ) N
(    src/main.cpp) N
() N
(#INSERTCLASSPOINT) N
(\)) N
() N
(add_executable\(main ${SOURCES}\)) N
(# Set include directories for the main target) N
(target_include_directories\(main) N
(    PRIVATE) N
(        ${CMAKE_CURRENT_SOURCE_DIR}/subprojects/UiManager) N
(        # ... other include directories ...) N
(\)) N
(# Link the executable with TimeUtils and StringUtils) N
(target_link_libraries\(main PRIVATE TimeUtils\)) N
(target_link_libraries\(main PRIVATE StringUtils\)) N
(target_link_libraries\(main PRIVATE Logger\)) N
(target_link_libraries\(main PRIVATE EnvVar\)) N
(target_link_libraries\(main PRIVATE UiManager\)) N
(target_link_libraries\(main PRIVATE CommandLineProcessor\)) N
() N
(# Link the JSON library) N
() N
(target_link_libraries\(main PRIVATE nlohmann_json::nlohmann_json\)) N
(---- END OF FILE: /home/henrik/Projekter/AppFramework/CMakeLists.txt ----) N
() N
(---- START OF FILE: /home/henrik/Projekter/AppFramework/src/main.cpp ----) N
(/*) N
(  This file is part of the AppFramework project.) N
(largefile.txt) (Page 44/75) (dec 10, 23 21:52) title
border
grestore
(Printed by Henrik S\303\270rensen) rhead
(largefile.txt) (22/38) (s\303\270ndag december 10, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (45-46) 23
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(  AppFramework is free software: you can redistribute it and/or modify) N
(  it under the terms of the GNU General Public License as published by) N
(  the Free Software Foundation, GPL version 4.) N
() N
(  AppFramework is distributed in the hope that it will be useful,) N
(  but WITHOUT ANY WARRANTY; without even the implied warranty of) N
(  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the) N
(  GNU General Public License version 4 for more details.) N
() N
(  You should have received a copy of the GNU General Public License) N
(  along with AppFramework. If not, see <https://www.gnu.org/licenses/>.) N
(===============================================================================*) N
(/) N
() N
(//main.cpp) N
() N
(#include <iostream>) N
(#include "EnvVar.hpp") N
(#include "ConfigManager.hpp") N
(#include "Logger.hpp") N
(#include "ArgumentConfig.hpp") N
(#include "Arguments.hpp") N
(#include "CommandLineProcessor.hpp") N
(#include "UiManager.hpp") N
() N
(//=============================================================================) N
(/* @brief Main entrance point of the program.) N
( * @param[in] argc The count of arguments provided) N
( * @param[in] argv A list of char* of arguments) N
( * @return An integer that denotes the endstate of the program to the OS) N
( * @since 1.0.0) N
( * @version 1.1) N
( * @author Henrik S\303\270rensen) N
( * @date 2023-01-01) N
( * @todo Further Development) N
( */) N
(//=============================================================================) N
(int main\(int argc, char* argv[]\) {) N
(    //=========================================================================) N
(    // Initialization) N
(    //=========================================================================) N
(    try {) N
(        // Define and process command-line arguments) N
(        auto definedArgs = ArgumentConfig::getDefinedArguments\(\);) N
(        Arguments cmdArgs\(argc, argv, definedArgs\);) N
(        CommandLineProcessor cmdProcessor\(cmdArgs\);) N
(        ArgumentConfig::setupArguments\(cmdProcessor\);) N
(        cmdProcessor.Process\(\);) N
() N
(        // Initialize configuration manager) N
(        ConfigManager configManager\("config.json", cmdArgs\);) N
() N
(        // Initialize environment variables) N
(        EnvVarUtils myVar\("LOGPATH"\);) N
(        std::string logPathValue = myVar.get\(\);) N
(        Logger::getInstance\(\).log\("LOGPATH value: " + logPathValue, "main", Logg) N
(er::Severity::Info\);) N
() N
(        // Create and run the UI) N
(        UIManager uiManager\(configManager, cmdArgs\);) N
(        uiManager.run\(\);) N
(largefile.txt) (Page 45/75) (dec 10, 23 21:52) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(    } catch \(const std::exception& e\) {) N
(        std::cerr << "Error During Initialization: " << e.what\(\) << std::endl;) N
(        exit\(1\);) N
(    }) N
() N
(    //=========================================================================) N
(    // Cleanup code) N
(    //=========================================================================) N
(    // Any necessary cleanup before exiting) N
() N
(    return 0;) N
(}---- END OF FILE: /home/henrik/Projekter/AppFramework/src/main.cpp ----) N
() N
(---- START OF FILE: /home/henrik/Projekter/AppFramework/include/Version.hpp ----) N
(/*) N
(  This file is part of the AppEssential project.) N
() N
(  AppEssential is free software: you can redistribute it and/or modify) N
(  it under the terms of the GNU General Public License as published by) N
(  the Free Software Foundation, GPL version 4.) N
() N
(  AppEssential is distributed in the hope that it will be useful,) N
(  but WITHOUT ANY WARRANTY; without even the implied warranty of) N
(  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the) N
(  GNU General Public License version 4 for more details.) N
() N
(  You should have received a copy of the GNU General Public License) N
(  along with AppEssential. If not, see <https://www.gnu.org/licenses/>.) N
(*/) N
() N
(// Version.hpp) N
() N
(#ifndef VERSION_HPP) N
(#define VERSION_HPP) N
() N
(#include <string>) N
() N
(const std::string VERSION = "1.0.2";) N
() N
(#endif // VERSION_HPP) N
(---- END OF FILE: /home/henrik/Projekter/AppFramework/include/Version.hpp ----) N
() N
(---- START OF FILE: /home/henrik/Projekter/AppFramework/config/skel.cpp ----) N
(/*) N
(  This file is part of the AppFramework project.) N
() N
(  AppFramework is free software: you can redistribute it and/or modify) N
(  it under the terms of the GNU General Public License as published by) N
(  the Free Software Foundation, GPL version 4.) N
() N
(  AppFramework is distributed in the hope that it will be useful,) N
(  but WITHOUT ANY WARRANTY; without even the implied warranty of) N
(  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the) N
(  GNU General Public License version 4 for more details.) N
() N
(  You should have received a copy of the GNU General Public License) N
(  along with AppFramework. If not, see <https://www.gnu.org/licenses/>.) N
(*/) N
() N
(// <classname>.cpp) N
() N
(largefile.txt) (Page 46/75) (dec 10, 23 21:52) title
border
grestore
(Printed by Henrik S\303\270rensen) rhead
(largefile.txt) (23/38) (s\303\270ndag december 10, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (47-48) 24
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#include "<classname>.hpp") p n
() N
(#ifdef THREAD_SAFE) N
(#include <mutex>) N
(std::mutex EnvVar::mtx;  // Define the static mutex) N
(#endif---- END OF FILE: /home/henrik/Projekter/AppFramework/config/skel.cpp ----) N
() N
(---- START OF FILE: /home/henrik/Projekter/AppFramework/config/skel.hpp ----) N
(/*) N
(  This file is part of the AppFramework project.) N
() N
(  AppFramework is free software: you can redistribute it and/or modify) N
(  it under the terms of the GNU General Public License as published by) N
(  the Free Software Foundation, GPL version 4.) N
() N
(  AppFramework is distributed in the hope that it will be useful,) N
(  but WITHOUT ANY WARRANTY; without even the implied warranty of) N
(  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the) N
(  GNU General Public License version 4 for more details.) N
() N
(  You should have received a copy of the GNU General Public License) N
(  along with AppFramework. If not, see <https://www.gnu.org/licenses/>.) N
(*/) N
() N
(// <classname>.hpp) N
() N
(#ifndef <CAPITALIZED CLASSNAME>_HPP) N
(#define <CAPITALIZED CLASSNAME>_HPP) N
() N
(#ifdef THREAD_SAFE) N
(#include <mutex>) N
(#endif) N
() N
(class <classname> {) N
() N
(};) N
(#endif // <CAPITALIZED CLASSNAME>_HPP---- END OF FILE: /home/henrik/Projekter/Ap) N
(pFramework/config/skel.hpp ----) N
() N
(---- START OF FILE: /home/henrik/Projekter/AppFramework/subprojects/Logger/Logge) N
(r.cpp ----) N
(/*) N
(  This file is part of the AppFramework project.) N
() N
(  AppFramework is free software: you can redistribute it and/or modify) N
(  it under the terms of the GNU General Public License as published by) N
(  the Free Software Foundation, GPL version 4.) N
() N
(  AppFramework is distributed in the hope that it will be useful,) N
(  but WITHOUT ANY WARRANTY; without even the implied warranty of) N
(  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the) N
(  GNU General Public License version 4 for more details.) N
() N
(  You should have received a copy of the GNU General Public License) N
(  along with AppFramework. If not, see <https://www.gnu.org/licenses/>.) N
(*/) N
() N
(// Logger.cpp) N
() N
(#include <iostream>) N
(#include <fstream>) N
(#include <sstream>) N
(largefile.txt) (Page 47/75) (dec 10, 23 21:52) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#include <chrono>) p n
(#include <iomanip>) N
(#include "Logger.hpp") N
(#include "DefaultSettings.hpp" ) N
(#include "EnvVar.hpp") N
(#include "StringUtils.hpp") N
(#include "TimeUtils.hpp") N
() N
(Logger::Logger\(\) {) N
(    // Fetch default log path from DefaultSettings) N
(    std::string defaultLogPath = DefaultSettings::getDefaultConfig\(\)["AppFramewo) N
(rk"]["Config"]["Defaults"]["Logger"]["defaultLogPath"];) N
(    ) N
(    std::string logPath = defaultLogPath; // Use default log path) N
() N
(    // Use std::getenv directly to avoid dependency on EnvVar) N
(    const char* configPath = std::getenv\("LOGPATH"\);) N
(    if \(configPath != nullptr\) {) N
(        logPath = std::string\(configPath\) + "/" + defaultLogPath;) N
(    }) N
() N
(    logFile.open\(logPath, std::ios::out | std::ios::app\);) N
(}) N
() N
(Logger::~Logger\(\) {) N
(    if \(logFile.is_open\(\)\) {) N
(        logFile.close\(\);) N
(    }) N
(}) N
() N
(Logger& Logger::getInstance\(\) {) N
(    static Logger instance;) N
(    return instance;) N
(}) N
() N
(void Logger::log\(const std::string& message, const std::string& location, Logger) N
(::Severity severity\) {) N
(    if \(logFile.is_open\(\)\) {) N
(        // Fetch the time format and log entry format from DefaultSettings) N
(        std::string timeFormat = DefaultSettings::getDefaultConfig\(\)["AppFramewo) N
(rk"]["Config"]["Defaults"]["Logger"]["timeFormat"];) N
(        std::string logEntryFormat = DefaultSettings::getDefaultConfig\(\)["AppFra) N
(mework"]["Config"]["Defaults"]["Logger"]["logEntryFormat"];) N
() N
(        // Get the current timestamp in the specified format) N
(        auto now = std::chrono::system_clock::now\(\);) N
(        auto now_time_t = std::chrono::system_clock::to_time_t\(now\);) N
(        std::tm now_localtime = *std::localtime\(&now_time_t\);) N
(        std::stringstream timestamp;) N
(        timestamp << std::put_time\(&now_localtime, timeFormat.c_str\(\)\);) N
() N
(        // Replace placeholders in the log entry format) N
(        StringUtils::replaceAll\(logEntryFormat, "%timestamp%", timestamp.str\(\)\);) N
(        StringUtils::replaceAll\(logEntryFormat, "%level%", severityToString\(seve) N
(rity\)\);) N
(        StringUtils::replaceAll\(logEntryFormat, "%location%", location\);) N
(        StringUtils::replaceAll\(logEntryFormat, "%message%", message\);) N
() N
(        // Write the formatted log entry) N
(        logFile << logEntryFormat << std::endl;) N
(    }) N
(}) N
(largefile.txt) (Page 48/75) (dec 10, 23 21:52) title
border
grestore
(Printed by Henrik S\303\270rensen) rhead
(largefile.txt) (24/38) (s\303\270ndag december 10, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (49-50) 25
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
() N
(std::string Logger::severityToString\(Severity severity\) {) N
(    switch \(severity\) {) N
(    ) S 8 T (case Severity::Trace:) S 32 T (return "TRACE";) N
(    ) S 8 T (case Severity::Debug:) S 32 T (return "DEBUG";) N
(        case Severity::Info:) S 32 T (return "INFO";) N
(        case Severity::Warning:) S 32 T (return "WARNING";) N
(        case Severity::Error:) S 32 T (return "ERROR";) N
(        case Severity::Fatal:) S 32 T (return "FATAL";) N
(        default:) N
(            return "UNKNOWN";) N
() S 8 T (}) N
(}) N
() N
(std::string Logger::formatMessage\(const std::string& message, Severity severity,) N
( const std::string& location\) {) N
(    // Fetch default log entry format and time format) N
(    std::string defaultLogEntryFormat = DefaultSettings::getDefaultConfig\(\)["App) N
(Framework"]["Config"]["Defaults"]["Logger"]["logEntryFormat"];) N
(    std::string timeFormat = DefaultSettings::getDefaultConfig\(\)["AppFramework"]) N
(["Config"]["Defaults"]["Logger"]["timeFormat"];) N
() N
(    // Format the message using the default format) N
(    std::string formattedMessage = defaultLogEntryFormat;) N
(    StringUtils::replaceAll\(formattedMessage, "%timestamp%", TimeUtils::getCurre) N
(ntTimestamp\(timeFormat\)\);) N
(    StringUtils::replaceAll\(formattedMessage, "%level%", severityToString\(severi) N
(ty\)\);) N
(    StringUtils::replaceAll\(formattedMessage, "%message%", message\);) N
(    StringUtils::replaceAll\(formattedMessage, "%location%", location\);) N
() N
(    return formattedMessage;) N
(}---- END OF FILE: /home/henrik/Projekter/AppFramework/subprojects/Logger/Logger) N
(.cpp ----) N
() N
(---- START OF FILE: /home/henrik/Projekter/AppFramework/subprojects/Logger/CMake) N
(Lists.txt ----) N
(# CMakeLists.txt for Logger subproject) N
() N
(# Define the Logger library) N
(add_library\(Logger) N
(    Logger.cpp) N
(    # ... other source files ...) N
(\)) N
() N
(# Link Logger with TimeUtils, StringUtils, and EnvVar) N
(target_link_libraries\(Logger) N
(    PRIVATE) N
(        StringUtils) N
(        TimeUtils) N
(        EnvVar) N
(\)) N
() N
(# Set include directories for Logger library) N
(target_include_directories\(Logger) N
(    PUBLIC ) N
(        ${CMAKE_CURRENT_SOURCE_DIR}) N
(        ${CMAKE_CURRENT_SOURCE_DIR}/../CommandLineProcessor  # Include CommandLi) N
(neProcessor subdirectory) N
(\)---- END OF FILE: /home/henrik/Projekter/AppFramework/subprojects/Logger/CMakeL) N
(ists.txt ----) N
(largefile.txt) (Page 49/75) (dec 10, 23 21:52) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(---- START OF FILE: /home/henrik/Projekter/AppFramework/subprojects/Logger/Logge) N
(r.hpp ----) N
(/*) N
(  This file is part of the AppFramework project.) N
() N
(  AppFramework is free software: you can redistribute it and/or modify) N
(  it under the terms of the GNU General Public License as published by) N
(  the Free Software Foundation, GPL version 4.) N
() N
(  AppFramework is distributed in the hope that it will be useful,) N
(  but WITHOUT ANY WARRANTY; without even the implied warranty of) N
(  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the) N
(  GNU General Public License version 4 for more details.) N
() N
(  You should have received a copy of the GNU General Public License) N
(  along with AppFramework. If not, see <https://www.gnu.org/licenses/>.) N
(*/) N
() N
(// Logger.hpp) N
() N
(#ifndef LOGGER_HPP) N
(#define LOGGER_HPP) N
() N
(#include <string>) N
(#include <fstream>) N
(#include <mutex>) N
() N
(class Logger {) N
(public:) N
(    enum class Severity {) N
(    ) S 8 T (Trace,) N
(    ) S 8 T (Debug,) N
(        Info,) N
(        Warning,) N
(        Error,) N
(        Fatal) N
(    };) N
() N
(    static Logger& getInstance\(\);) N
(    void log\(const std::string& message, const std::string& location, Severity s) N
(everity\);) N
(    void setFormat\(const std::string& format\) {) N
(        this->logFormat = format;) N
(    }) N
(    std::string formatMessage\(const std::string& message, Severity severity, con) N
(st std::string& location\);) N
(private:) N
(    std::ofstream logFile;) N
(    std::mutex mtx;) N
() N
(    Logger\(\); // Private constructor for Singleton pattern) N
(    ~Logger\(\);) N
(    Logger\(const Logger&\) = delete;) N
(    Logger& operator=\(const Logger&\) = delete;) N
(    std::string logFormat;) N
(    std::string severityToString\(Severity severity\);) N
(};) N
() N
(#endif // LOGGER_HPP) N
(---- END OF FILE: /home/henrik/Projekter/AppFramework/subprojects/Logger/Logger.) N
(hpp ----) N
(largefile.txt) (Page 50/75) (dec 10, 23 21:52) title
border
grestore
(Printed by Henrik S\303\270rensen) rhead
(largefile.txt) (25/38) (s\303\270ndag december 10, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (51-52) 26
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(---- START OF FILE: /home/henrik/Projekter/AppFramework/subprojects/UiManager/Ui) N
(Manager.hpp ----) N
(/*) N
(  This file is part of the AppEssential project.) N
() N
(  AppEssential is free software: you can redistribute it and/or modify) N
(  it under the terms of the GNU General Public License as published by) N
(  the Free Software Foundation, GPL version 4.) N
() N
(  AppEssential is distributed in the hope that it will be useful,) N
(  but WITHOUT ANY WARRANTY; without even the implied warranty of) N
(  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the) N
(  GNU General Public License version 4 for more details.) N
() N
(  You should have received a copy of the GNU General Public License) N
(  along with AppEssential. If not, see <https://www.gnu.org/licenses/>.) N
(*/) N
() N
(// UiManager.hpp) N
() N
(#ifndef UIMANAGER_HPP) N
(#define UIMANAGER_HPP) N
() N
(#include <gtk/gtk.h>) N
(#include "ConfigManager.hpp") N
(#include "Arguments.hpp") N
() N
(class UIManager {) N
(private:) N
(    GtkWidget *window;) N
(    ConfigManager& configManager;) N
(    Arguments& cmdArgs;) N
() N
(    void initializeGtk\(\);) N
(    void createMainWindow\(\);) N
() N
(public:) N
(    UIManager\(ConfigManager& configManager, Arguments& cmdArgs\);) N
(    ~UIManager\(\);) N
() N
(    void run\(\);) N
(};) N
() N
(#endif // UIMANAGER_HPP) N
(---- END OF FILE: /home/henrik/Projekter/AppFramework/subprojects/UiManager/UiMa) N
(nager.hpp ----) N
() N
(---- START OF FILE: /home/henrik/Projekter/AppFramework/subprojects/UiManager/CM) N
(akeLists.txt ----) N
(cmake_minimum_required\(VERSION 3.0\)) N
(project\(UiManager\)) N
() N
(# Find the GTK package) N
(find_package\(PkgConfig REQUIRED\)) N
(pkg_check_modules\(GTK3 REQUIRED gtk+-3.0\)) N
() N
(# Define the UiManager library) N
(add_library\(UiManager) N
(    UiManager.cpp) N
(\)) N
() N
(largefile.txt) (Page 51/75) (dec 10, 23 21:52) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(# Include GTK headers) p n
(target_include_directories\(UiManager) N
(    PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}) N
(    ) S 8 T (${GTK3_INCLUDE_DIRS}) N
(    ) S 8 T (${CMAKE_CURRENT_SOURCE_DIR}/../CommandLineProcessor) N
(\)) N
() N
(# Link GTK libraries) N
(target_link_libraries\(UiManager) N
(    ${GTK3_LIBRARIES}) N
(\)) N
() N
(# Additional GTK flags) N
(target_compile_options\(UiManager) N
(    PUBLIC ${GTK3_CFLAGS_OTHER}) N
(\)) N
(---- END OF FILE: /home/henrik/Projekter/AppFramework/subprojects/UiManager/CMak) N
(eLists.txt ----) N
() N
(---- START OF FILE: /home/henrik/Projekter/AppFramework/subprojects/UiManager/Ui) N
(Manager.cpp ----) N
(/*) N
(  This file is part of the AppEssential project.) N
() N
(  AppEssential is free software: you can redistribute it and/or modify) N
(  it under the terms of the GNU General Public License as published by) N
(  the Free Software Foundation, GPL version 4.) N
() N
(  AppEssential is distributed in the hope that it will be useful,) N
(  but WITHOUT ANY WARRANTY; without even the implied warranty of) N
(  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the) N
(  GNU General Public License version 4 for more details.) N
() N
(  You should have received a copy of the GNU General Public License) N
(  along with AppEssential. If not, see <https://www.gnu.org/licenses/>.) N
(*/) N
() N
(// UiManager.cpp) N
() N
(#include "UiManager.hpp") N
(#include <clocale> ) N
(#include <libintl.h>) N
(#include <string>) N
() N
(#define _\(String\) gettext\(String\)) N
() N
(// Constructor) N
() N
() N
(UIManager::UIManager\(ConfigManager& configManager, Arguments& cmdArgs\)) N
(    : configManager\(configManager\), cmdArgs\(cmdArgs\) {) N
(    initializeGtk\(\);) N
(    createMainWindow\(\);) N
(}) N
() N
(UIManager::~UIManager\(\) {) N
(    // Assuming window will be automatically destroyed when the main loop quits) N
(    // If any additional cleanup is needed, do it here) N
(}) N
() N
(void UIManager::initializeGtk\(\) {) N
(    // Extract the GTK-specific arguments from the command line arguments) N
(largefile.txt) (Page 52/75) (dec 10, 23 21:52) title
border
grestore
(Printed by Henrik S\303\270rensen) rhead
(largefile.txt) (26/38) (s\303\270ndag december 10, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (53-54) 27
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    std::vector<char*> gtkArgs;) p n
(    auto gtkArgList = cmdArgs.getGtkArguments\(\); // You need to implement this m) N
(ethod) N
(    for \(auto& arg : gtkArgList\) {) N
(        gtkArgs.push_back\(const_cast<char*>\(arg.c_str\(\)\)\);) N
(    }) N
(    int gtkArgc = gtkArgs.size\(\);) N
(    char** gtkArgv = gtkArgs.data\(\);) N
() N
(    // Initialize GTK) N
(    gtk_init\(&gtkArgc, &gtkArgv\);) N
(}) N
() N
(void UIManager::createMainWindow\(\) {) N
(    // Use settings from ConfigManager to set up the main window) N
(    int width = configManager.get<int>\("AppFramework.Config.Defaults.gtk.window.) N
(width"\);) N
(    int height = configManager.get<int>\("AppFramework.Config.Defaults.gtk.window) N
(.height"\);) N
(    int xpos = configManager.get<int>\("AppFramework.Config.Defaults.gtk.window.p) N
(os_x"\);) N
() S 8 T (int ypos = configManager.get<int>\("AppFramework.Config.Defaults.gtk.wind) N
(ow.pos_y"\);) N
() S 8 T (std::string title = configManager.get<std::string>\("AppFramework.Config.) N
(Defaults.gtk.window.title"\);) N
( ) N
(    window = gtk_window_new\(GTK_WINDOW_TOPLEVEL\);) N
() N
(    gtk_window_set_default_size\(GTK_WINDOW\(window\), width, height\);) N
() S 8 T (gtk_window_move\(GTK_WINDOW\(window\), xpos, ypos\);) N
() S 8 T (gtk_window_set_title\(GTK_WINDOW\(window\),title.c_str\(\)\);) N
() N
(    // Connect the window's destroy signal to gtk_main_quit to exit the applicat) N
(ion) N
(    g_signal_connect\(window, "destroy", G_CALLBACK\(gtk_main_quit\), NULL\);) N
() N
(    // Additional setup for widgets inside the window) N
(    // ...) N
(}) N
() N
(void UIManager::run\(\) {) N
(    // Show the window and all its contents) N
(    gtk_widget_show_all\(window\);) N
() N
(    // Enter the GTK main event loop) N
(    gtk_main\(\);) N
(}) N
(---- END OF FILE: /home/henrik/Projekter/AppFramework/subprojects/UiManager/UiMa) N
(nager.cpp ----) N
() N
(---- START OF FILE: /home/henrik/Projekter/AppFramework/subprojects/EnvVar/CMake) N
(Lists.txt ----) N
(# Define the EnvVar library) N
() N
(add_library\(EnvVar) N
(    EnvVar.cpp) N
(\)) N
() N
(# Set include directories for EnvVar library) N
(target_include_directories\(EnvVar) N
(    PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}) N
(\)---- END OF FILE: /home/henrik/Projekter/AppFramework/subprojects/EnvVar/CMakeL) N
(largefile.txt) (Page 53/75) (dec 10, 23 21:52) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(ists.txt ----) p n
() N
(---- START OF FILE: /home/henrik/Projekter/AppFramework/subprojects/EnvVar/EnvVa) N
(r.hpp ----) N
(/*) N
(  This file is part of the AppFramework project.) N
() N
(  AppFramework is free software: you can redistribute it and/or modify) N
(  it under the terms of the GNU General Public License as published by) N
(  the Free Software Foundation, GPL version 4.) N
() N
(  AppFramework is distributed in the hope that it will be useful,) N
(  but WITHOUT ANY WARRANTY; without even the implied warranty of) N
(  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the) N
(  GNU General Public License version 4 for more details.) N
() N
(  You should have received a copy of the GNU General Public License) N
(  along with AppFramework. If not, see <https://www.gnu.org/licenses/>.) N
(*/) N
() N
(// EnvVar.hpp) N
() N
(#ifndef ENVVAR_HPP) N
(#define ENVVAR_HPP) N
() N
(#include <string>) N
(#include <optional>) N
(#ifdef THREAD_SAFE) N
(#include <mutex>) N
(#endif) N
() N
(class EnvVarUtils {) N
(public:) N
(    explicit EnvVarUtils\(const std::string& name\);) N
(    ) N
(    std::string get\(\) const;) N
(    bool set\(const std::string& value\) const;) N
(    void store\(\);) N
(    bool restore\(\) const;) N
(//Todo: Expand the functionality and add more EnvVar methodes) N
(private:) N
(    std::string varName;) N
(    std::optional<std::string> storedValue;) N
() N
(#ifdef THREAD_SAFE) N
(    static std::mutex mtx;  // Mutex for thread safety) N
(#endif) N
(};) N
() N
(#endif // ENVVAR_HPP) N
() N
(---- END OF FILE: /home/henrik/Projekter/AppFramework/subprojects/EnvVar/EnvVar.) N
(hpp ----) N
() N
(---- START OF FILE: /home/henrik/Projekter/AppFramework/subprojects/EnvVar/EnvVa) N
(r.cpp ----) N
(/*) N
(  This file is part of the AppFramework project.) N
() N
(  AppFramework is free software: you can redistribute it and/or modify) N
(  it under the terms of the GNU General Public License as published by) N
(  the Free Software Foundation, GPL version 4.) N
(largefile.txt) (Page 54/75) (dec 10, 23 21:52) title
border
grestore
(Printed by Henrik S\303\270rensen) rhead
(largefile.txt) (27/38) (s\303\270ndag december 10, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (55-56) 28
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(  AppFramework is distributed in the hope that it will be useful,) N
(  but WITHOUT ANY WARRANTY; without even the implied warranty of) N
(  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the) N
(  GNU General Public License version 4 for more details.) N
() N
(  You should have received a copy of the GNU General Public License) N
(  along with AppFramework. If not, see <https://www.gnu.org/licenses/>.) N
(*/) N
() N
(// EnvVarUtils.cpp) N
() N
(#include "EnvVar.hpp") N
(//#include "Logger.hpp") N
(#include <cstdlib>) N
(#ifdef THREAD_SAFE) N
(#include <mutex>) N
(std::mutex EnvVarUtils::mtx;  // Define the static mutex) N
(#endif) N
() N
(EnvVarUtils::EnvVarUtils\(const std::string& name\) : varName\(name\) {}) N
() N
(std::string EnvVarUtils::get\(\) const {) N
(#ifdef THREAD_SAFE) N
(    std::lock_guard<std::mutex> lock\(mtx\);  // Lock the mutex) N
(#endif) N
(    const char* value = std::getenv\(varName.c_str\(\)\);) N
(    return \(value != nullptr\) ? std::string\(value\) : std::string\(\);) N
(}) N
() N
(bool EnvVarUtils::set\(const std::string& value\) const {) N
(#ifdef THREAD_SAFE) N
(    std::lock_guard<std::mutex> lock\(mtx\);  // Lock the mutex) N
(#endif) N
(    return setenv\(varName.c_str\(\), value.c_str\(\), 1\) == 0;) N
(}) N
() N
(void EnvVarUtils::store\(\) {) N
(#ifdef THREAD_SAFE) N
(    std::lock_guard<std::mutex> lock\(mtx\);  // Lock the mutex) N
(#endif) N
(    storedValue = get\(\);) N
(}) N
() N
(bool EnvVarUtils::restore\(\) const {) N
(#ifdef THREAD_SAFE) N
(    std::lock_guard<std::mutex> lock\(mtx\);  // Lock the mutex) N
(#endif) N
(    if \(storedValue.has_value\(\)\) {) N
(        return set\(storedValue.value\(\)\);) N
(    }) N
(    return false;) N
(}---- END OF FILE: /home/henrik/Projekter/AppFramework/subprojects/EnvVar/EnvVar) N
(.cpp ----) N
() N
(---- START OF FILE: /home/henrik/Projekter/AppFramework/subprojects/TimeUtils/Ti) N
(meUtils.cpp ----) N
(/*) N
(  This file is part of the AppEssential project.) N
() N
(  AppEssential is free software: you can redistribute it and/or modify) N
(  it under the terms of the GNU General Public License as published by) N
(largefile.txt) (Page 55/75) (dec 10, 23 21:52) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(  the Free Software Foundation, GPL version 4.) p n
() N
(  AppEssential is distributed in the hope that it will be useful,) N
(  but WITHOUT ANY WARRANTY; without even the implied warranty of) N
(  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the) N
(  GNU General Public License version 4 for more details.) N
() N
(  You should have received a copy of the GNU General Public License) N
(  along with AppEssential. If not, see <https://www.gnu.org/licenses/>.) N
(*/) N
() N
(// TimeUtils.cpp) N
() N
(#include "TimeUtils.hpp") N
(#include <chrono>) N
(#include <iomanip>) N
(#include <sstream>) N
() N
(namespace TimeUtils {) N
(    std::string getCurrentTimestamp\(\) {) N
(        return getCurrentTimestamp\("%Y-%m-%d %H:%M:%S"\);) N
(    }) N
() N
(    std::string getCurrentTimestamp\(const std::string& timeFormat\) {) N
(        auto now = std::chrono::system_clock::now\(\);) N
(        auto now_time_t = std::chrono::system_clock::to_time_t\(now\);) N
(        auto now_localtime = *std::localtime\(&now_time_t\);) N
() N
(        std::ostringstream timestampStream;) N
(        timestampStream << std::put_time\(&now_localtime, timeFormat.c_str\(\)\);) N
(        return timestampStream.str\(\);) N
(    }) N
() N
(    std::chrono::system_clock::time_point parseTimestamp\(const std::string& time) N
(stamp, const std::string& timeFormat\) {) N
(        std::tm tm = {};) N
(        std::istringstream timestampStream\(timestamp\);) N
(        timestampStream >> std::get_time\(&tm, timeFormat.c_str\(\)\);) N
() N
(        if \(timestampStream.fail\(\)\) {) N
(            throw std::invalid_argument\("Invalid timestamp or format."\);) N
(        }) N
() N
(        std::time_t time = std::mktime\(&tm\);) N
(        return std::chrono::system_clock::from_time_t\(time\);) N
(    }) N
() N
(    std::chrono::seconds calculateTimeDifference\(const std::string& timestamp1, ) N
(const std::string& timestamp2, const std::string& timeFormat\) {) N
(        std::chrono::system_clock::time_point time1 = parseTimestamp\(timestamp1,) N
( timeFormat\);) N
(        std::chrono::system_clock::time_point time2 = parseTimestamp\(timestamp2,) N
( timeFormat\);) N
() N
(        std::chrono::seconds difference = std::chrono::duration_cast<std::chrono) N
(::seconds>\(time2 - time1\);) N
(        return difference;) N
(    }) N
(} // namespace TimeUtils) N
(---- END OF FILE: /home/henrik/Projekter/AppFramework/subprojects/TimeUtils/Time) N
(Utils.cpp ----) N
() N
(largefile.txt) (Page 56/75) (dec 10, 23 21:52) title
border
grestore
(Printed by Henrik S\303\270rensen) rhead
(largefile.txt) (28/38) (s\303\270ndag december 10, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (57-58) 29
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(---- START OF FILE: /home/henrik/Projekter/AppFramework/subprojects/TimeUtils/CM) p n
(akeLists.txt ----) N
(# Define the TimeUtils library) N
() N
(add_library\(TimeUtils) N
(    TimeUtils.cpp) N
(\)) N
() N
(# Set include directories for TimeUtils library) N
(target_include_directories\(TimeUtils) N
(    PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}) N
(\)) N
(---- END OF FILE: /home/henrik/Projekter/AppFramework/subprojects/TimeUtils/CMak) N
(eLists.txt ----) N
() N
(---- START OF FILE: /home/henrik/Projekter/AppFramework/subprojects/TimeUtils/Ti) N
(meUtils.hpp ----) N
(/*) N
(  This file is part of the AppEssential project.) N
() N
(  AppEssential is free software: you can redistribute it and/or modify) N
(  it under the terms of the GNU General Public License as published by) N
(  the Free Software Foundation, GPL version 4.) N
() N
(  AppEssential is distributed in the hope that it will be useful,) N
(  but WITHOUT ANY WARRANTY; without even the implied warranty of) N
(  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the) N
(  GNU General Public License version 4 for more details.) N
() N
(  You should have received a copy of the GNU General Public License) N
(  along with AppEssential. If not, see <https://www.gnu.org/licenses/>.) N
(*/) N
() N
(// TimeUtils.hpp) N
() N
(#ifndef TIMEUTILS_HPP) N
(#define TIMEUTILS_HPP) N
() N
(#include <string>) N
(#include <chrono>) N
() N
(namespace TimeUtils {) N
(    std::string getCurrentTimestamp\(\);) N
(    std::string getCurrentTimestamp\(const std::string& timeFormat\);) N
(    std::chrono::system_clock::time_point parseTimestamp\(const std::string& time) N
(stamp, const std::string& timeFormat\);) N
(    std::chrono::seconds calculateTimeDifference\(const std::string& timestamp1, ) N
(const std::string& timestamp2, const std::string& timeFormat\);) N
(} // namespace TimeUtils) N
() N
(#endif // TIMEUTILS_HPP) N
(---- END OF FILE: /home/henrik/Projekter/AppFramework/subprojects/TimeUtils/Time) N
(Utils.hpp ----) N
() N
(---- START OF FILE: /home/henrik/Projekter/AppFramework/subprojects/StringUtils/) N
(StringUtils.cpp ----) N
(/*) N
(  This file is part of the AppEssential project.) N
() N
(  AppEssential is free software: you can redistribute it and/or modify) N
(  it under the terms of the GNU General Public License as published by) N
(  the Free Software Foundation, GPL version 4.) N
(largefile.txt) (Page 57/75) (dec 10, 23 21:52) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(  AppEssential is distributed in the hope that it will be useful,) N
(  but WITHOUT ANY WARRANTY; without even the implied warranty of) N
(  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the) N
(  GNU General Public License version 4 for more details.) N
() N
(  You should have received a copy of the GNU General Public License) N
(  along with AppEssential. If not, see <https://www.gnu.org/licenses/>.) N
(*/) N
() N
(// StringUtils.hpp) N
() N
(#include "StringUtils.hpp") N
() N
(namespace StringUtils {) N
() N
(    void replaceAll\(std::string& str, const std::string& from, const std::string) N
(& to\) {) N
(        if \(from.empty\(\)\) {) N
(            return;) N
(        }) N
(        size_t startPos = 0;) N
(        while \(\(startPos = str.find\(from, startPos\)\) != std::string::npos\) {) N
(            str.replace\(startPos, from.length\(\), to\);) N
(            startPos += to.length\(\);) N
(        }) N
(    }) N
() N
(    // Implementations of other utility functions) N
() N
(} // namespace StringUtils) N
(---- END OF FILE: /home/henrik/Projekter/AppFramework/subprojects/StringUtils/St) N
(ringUtils.cpp ----) N
() N
(---- START OF FILE: /home/henrik/Projekter/AppFramework/subprojects/StringUtils/) N
(CMakeLists.txt ----) N
(# Define the StringUtils library) N
() N
(add_library\(StringUtils) N
(    StringUtils.cpp) N
(\)) N
() N
(# Set include directories for TimeUtils library) N
(target_include_directories\(StringUtils) N
(    PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}) N
(\)) N
(---- END OF FILE: /home/henrik/Projekter/AppFramework/subprojects/StringUtils/CM) N
(akeLists.txt ----) N
() N
(---- START OF FILE: /home/henrik/Projekter/AppFramework/subprojects/StringUtils/) N
(StringUtils.hpp ----) N
(/*) N
(  This file is part of the AppEssential project.) N
() N
(  AppEssential is free software: you can redistribute it and/or modify) N
(  it under the terms of the GNU General Public License as published by) N
(  the Free Software Foundation, GPL version 4.) N
() N
(  AppEssential is distributed in the hope that it will be useful,) N
(  but WITHOUT ANY WARRANTY; without even the implied warranty of) N
(  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the) N
(  GNU General Public License version 4 for more details.) N
(largefile.txt) (Page 58/75) (dec 10, 23 21:52) title
border
grestore
(Printed by Henrik S\303\270rensen) rhead
(largefile.txt) (29/38) (s\303\270ndag december 10, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (59-60) 30
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(  You should have received a copy of the GNU General Public License) N
(  along with AppEssential. If not, see <https://www.gnu.org/licenses/>.) N
(*/) N
() N
(//StringUtils.cpp) N
() N
(#ifndef STRINGUTILS_HPP) N
(#define STRINGUTILS_HPP) N
() N
(#include <string>) N
() N
(namespace StringUtils {) N
() N
(    void replaceAll\(std::string& str, const std::string& from, const std::string) N
(& to\);) N
() N
(    // Add more string utility functions here as needed) N
() N
(} // namespace StringUtils) N
() N
(#endif // STRINGUTILS_HPP) N
(---- END OF FILE: /home/henrik/Projekter/AppFramework/subprojects/StringUtils/St) N
(ringUtils.hpp ----) N
() N
(---- START OF FILE: /home/henrik/Projekter/AppFramework/subprojects/CommandLineP) N
(rocessor/ArgumentConfig.hpp ----) N
(/*) N
(  This file is part of the AppFramework project.) N
() N
(  AppFramework is free software: you can redistribute it and/or modify) N
(  it under the terms of the GNU General Public License as published by) N
(  the Free Software Foundation, GPL version 4.) N
() N
(  AppFramework is distributed in the hope that it will be useful,) N
(  but WITHOUT ANY WARRANTY; without even the implied warranty of) N
(  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the) N
(  GNU General Public License version 4 for more details.) N
() N
(  You should have received a copy of the GNU General Public License) N
(  along with AppFramework. If not, see <https://www.gnu.org/licenses/>.) N
(*/) N
() N
(// ArgumentConfig.hpp) N
() N
(#ifndef ARGUMENTCONFIG_HPP) N
(#define ARGUMENTCONFIG_HPP) N
() N
(#include "Argument.hpp") N
(#include "CommandLineProcessor.hpp") N
(#include <iostream> // Include for std::cout) N
(#include <memory>) N
(#include <map>) N
() N
(void handleHelp\(const std::shared_ptr<Argument>& arg\);) N
(void handleVersion\(const std::shared_ptr<Argument>& arg\);) N
(void handleDumpConfig\(const std::shared_ptr<Argument>& arg\);) N
(void dumpDefaultConfig\(\);) N
() N
(class ArgumentConfig {) N
(public:) N
(    static std::map<std::string, Argument> getDefinedArguments\(\);) N
(largefile.txt) (Page 59/75) (dec 10, 23 21:52) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    static void setupArguments\(CommandLineProcessor& cmdProcessor\);) p n
(};) N
() N
(#endif // ARGUMENTCONFIG_HPP---- END OF FILE: /home/henrik/Projekter/AppFramewor) N
(k/subprojects/CommandLineProcessor/ArgumentConfig.hpp ----) N
() N
(---- START OF FILE: /home/henrik/Projekter/AppFramework/subprojects/CommandLineP) N
(rocessor/DefaultSettings.cpp ----) N
(/*) N
(  This file is part of the AppFramework project.) N
() N
(  AppFramework is free software: you can redistribute it and/or modify) N
(  it under the terms of the GNU General Public License as published by) N
(  the Free Software Foundation, GPL version 4.) N
() N
(  AppFramework is distributed in the hope that it will be useful,) N
(  but WITHOUT ANY WARRANTY; without even the implied warranty of) N
(  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the) N
(  GNU General Public License version 4 for more details.) N
() N
(  You should have received a copy of the GNU General Public License) N
(  along with AppFramework. If not, see <https://www.gnu.org/licenses/>.) N
(*/) N
() N
(//DefaultSettings.cpp) N
() N
(#include "DefaultSettings.hpp") N
() N
(//=============================================================================) N
(// Write your default hardcoded configs here in json format) N
(//=============================================================================) N
(const nlohmann::json DefaultSettings::defaultConfig = {) N
(    {"AppFramework", {) N
(        {"Config", {) N
(            {"Defaults", {) N
(                {"gtk", {) N
(                    {"module", "default_module"},) N
(                    {"window", {) N
(                        {"height", 600},) N
(                        {"pos_x", 500},) N
(                        {"pos_y", 500},) N
(                        {"width", 800},) N
(                        {"title", "AppFramework test"}) N
(                    }}) N
(                }},) N
(                {"Logger", {) N
(                    {"defaultLogPath", "testing.log"},) N
(                    {"logEntryFormat", "[%timestamp%] [%level%] %location%: %mes) N
(sage%"},) N
(                    {"timeFormat", "%Y-%m-%d %H:%M:%S"}) N
(                }}) N
(                // ... other default settings ...) N
(            }}) N
(        }}) N
(    }}) N
(};) N
(//=============================================================================) N
(//) N
(//=============================================================================) N
() N
(const nlohmann::json DefaultSettings::getDefaultConfig\(\) {) N
(    return defaultConfig;) N
(largefile.txt) (Page 60/75) (dec 10, 23 21:52) title
border
grestore
(Printed by Henrik S\303\270rensen) rhead
(largefile.txt) (30/38) (s\303\270ndag december 10, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (61-62) 31
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(}---- END OF FILE: /home/henrik/Projekter/AppFramework/subprojects/CommandLinePr) p n
(ocessor/DefaultSettings.cpp ----) N
() N
(---- START OF FILE: /home/henrik/Projekter/AppFramework/subprojects/CommandLineP) N
(rocessor/ArgumentConfig.cpp ----) N
(/*) N
(  This file is part of the AppFramework project.) N
() N
(  AppFramework is free software: you can redistribute it and/or modify) N
(  it under the terms of the GNU General Public License as published by) N
(  the Free Software Foundation, GPL version 4.) N
() N
(  AppFramework is distributed in the hope that it will be useful,) N
(  but WITHOUT ANY WARRANTY; without even the implied warranty of) N
(  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the) N
(  GNU General Public License version 4 for more details.) N
() N
(  You should have received a copy of the GNU General Public License) N
(  along with AppFramework. If not, see <https://www.gnu.org/licenses/>.) N
(*/) N
() N
(// ArgumentConfig.cpp) N
() N
() N
(#include <iostream>) N
(#include <fstream>  // Include for std::ofstream) N
(#include <nlohmann/json.hpp>  // Include for JSON handling) N
(#include "Argument.hpp" ) N
(#include "ArgumentConfig.hpp") N
(#include "DefaultSettings.hpp") N
(#include "Version.hpp") N
(#include "ConfigManager.hpp") N
() N
(std::vector<ArgumentData> argumentDefinitions = {) N
(    {"--help", "-h", "Display help information", true, false, E_Argument_ValueTy) N
(pe::None},) N
(    {"--version", "-v", "Display version information", true, false, E_Argument_V) N
(alueType::None},) N
(    {"--dumpconfig", "-D", "Dumps the default settings to config.json", true, fa) N
(lse, E_Argument_ValueType::None}) N
(    // Add other arguments here) N
(};) N
(void handleHelp\(const std::shared_ptr<Argument>& arg\) {) N
(    std::cout << "Help requested: " << arg->getDescription\(\) << std::endl;) N
() N
(    // Print the command-line options and their descriptions) N
(    std::cout << "Available command-line options:" << std::endl;) N
(    for \(const auto& argData : argumentDefinitions\) {) N
(        std::cout << "  " << argData.longName << ", " << argData.shortName << "\\) N
(n    " << argData.description << std::endl;) N
(    }) N
(    exit\(0\);) N
(}) N
() N
(void handleVersion\(const std::shared_ptr<Argument>& arg\) {) N
() S 8 T (std::cout << VERSION << std::endl;) N
() S 8 T (exit\(0\);) N
(}) N
() N
(void handleDumpConfig\(const std::shared_ptr<Argument>& arg\) {) N
(    dumpDefaultConfig\(\);) N
(    exit\(0\); // You might want to exit the program after dumping the config) N
(largefile.txt) (Page 61/75) (dec 10, 23 21:52) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(}) p n
() N
(void dumpDefaultConfig\(\) {) N
(    nlohmann::json defaultConfig = DefaultSettings::getDefaultConfig\(\);) N
(    std::ofstream configFile\("config.json"\);) N
(    configFile << defaultConfig.dump\(4\); // '4' for pretty printing) N
(    configFile.close\(\);) N
() N
(    std::cout << "Default configuration dumped to config.json" << std::endl;) N
(}) N
() N
(std::map<std::string, Argument> ArgumentConfig::getDefinedArguments\(\) {) N
(    std::map<std::string, Argument> definedArgs;) N
(    for \(const auto& argData : argumentDefinitions\) {) N
(        definedArgs.emplace\(argData.longName, Argument\(argData\)\);) N
(    }) N
(    return definedArgs;) N
(}) N
() N
(void ArgumentConfig::setupArguments\(CommandLineProcessor& cmdProcessor\) {) N
(    // Define your arguments) N
(    Argument helpArg\("--help", "-h", "Display help information", true, false, E_) N
(Argument_ValueType::None\);) N
(    Argument versionArg\("--version", "-v", "Display version information", true, ) N
(false, E_Argument_ValueType::None\);) N
(    Argument dumpConfigArg\("--dumpconfig", "-D", "Dumps the default settings to ) N
(config.json", true, false, E_Argument_ValueType::None\);) N
() N
(    // Add handler functions) N
(    cmdProcessor.AddArgumentHandler\(helpArg, handleHelp\);) N
(    cmdProcessor.AddArgumentHandler\(versionArg, handleVersion\);) N
() S 8 T (cmdProcessor.AddArgumentHandler\(dumpConfigArg, handleDumpConfig\);) N
(    // ... other handlers ...) N
(}) N
(---- END OF FILE: /home/henrik/Projekter/AppFramework/subprojects/CommandLinePro) N
(cessor/ArgumentConfig.cpp ----) N
() N
(---- START OF FILE: /home/henrik/Projekter/AppFramework/subprojects/CommandLineP) N
(rocessor/ConfigManager.cpp ----) N
(/*) N
(  This file is part of the AppFramework project.) N
() N
(  AppFramework is free software: you can redistribute it and/or modify) N
(  it under the terms of the GNU General Public License as published by) N
(  the Free Software Foundation, GPL version 4.) N
() N
(  AppFramework is distributed in the hope that it will be useful,) N
(  but WITHOUT ANY WARRANTY; without even the implied warranty of) N
(  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the) N
(  GNU General Public License version 4 for more details.) N
() N
(  You should have received a copy of the GNU General Public License) N
(  along with AppFramework. If not, see <https://www.gnu.org/licenses/>.) N
(*/) N
() N
(// ConfigManager.cpp) N
() N
(#include "Arguments.hpp") N
(#include "ConfigManager.hpp") N
(#include "Logger.hpp") N
(#include <DefaultSettings.hpp>) N
(#include <nlohmann/json.hpp>) N
(largefile.txt) (Page 62/75) (dec 10, 23 21:52) title
border
grestore
(Printed by Henrik S\303\270rensen) rhead
(largefile.txt) (31/38) (s\303\270ndag december 10, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (63-64) 32
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#include <iostream>) p n
(#include <fstream>) N
(#include <sstream>) N
() N
(#ifdef THREAD_SAFE) N
(std::mutex ConfigManager::mtx;) N
(#endif) N
() N
(template<typename T>) N
(void ConfigManager::set\(const std::string& key, const T& value\) {) N
(    #ifdef THREAD_SAFE) N
(    std::lock_guard<std::mutex> lock\(mtx\);) N
(    #endif) N
() N
(    nlohmann::json& ref = getRefToValue\(key\);) N
(    ref = value;) N
(}) N
() N
(template<typename T>) N
(T ConfigManager::get\(const std::string& key\) const {) N
(    #ifdef THREAD_SAFE) N
(    std::lock_guard<std::mutex> lock\(mtx\);) N
(    #endif) N
() N
(    // Check if a command line argument exists and has a value for the key) N
(    if \(commandLineArgs.find\(key\) != commandLineArgs.end\(\)\) {) N
(        std::istringstream valueStream\(commandLineArgs.at\(key\)\);) N
(        T typedValue;) N
(        valueStream >> typedValue;) N
(        return typedValue;) N
(    }) N
() N
(    try {) N
(        const nlohmann::json& ref = getRefToValue\(key, true\);) N
(        return ref.get<T>\(\);) N
(    } catch \(const nlohmann::json::out_of_range& e\) {) N
(        // Handle the case where the key does not exist) N
(        Logger::getInstance\(\).log\("Key not found in configuration: " + key, "Con) N
(figManager::get", Logger::Severity::Warning\);) N
(    }) N
(        return T\(\); // Returns a default-constructed object of type T) N
(    // Additional catch for other JSON exceptions might be needed) N
(}) N
() N
(ConfigManager::ConfigManager\(const std::string& configFilePath, const Arguments&) N
( cmdArgs\): filePath\(configFilePath\), cmdArgs\(cmdArgs\) {) N
(    applyDefaults\(\);) N
() N
(    std::ifstream file\(filePath\);) N
(    if \(file\) {) N
(        try {) N
(            nlohmann::json fileConfig;) N
(            file >> fileConfig;) N
(            config.merge_patch\(fileConfig\);) N
() N
(            std::cout << "ConfigManager::ConfigManager:" << std::endl; ) N
(            std::cout << config.dump\(4\) << std::endl;) N
(        } catch \(const nlohmann::json::parse_error& e\) {) N
(            std::cout << "Caught an exception" << std::endl;) N
(            Logger::getInstance\(\).log\("JSON parsing error: " + std::string\(e.wha) N
(t\(\)\), "ConfigManager::ConfigManager", Logger::Severity::Error\);) N
(            std::cout << "Configuration loading error. Check log file for detail) N
(largefile.txt) (Page 63/75) (dec 10, 23 21:52) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(s." << std::endl;) p n
(        }) N
(    } else {) N
(        Logger::getInstance\(\).log\("Config file not found: " + filePath, "ConfigM) N
(anager::ConfigManager", Logger::Severity::Warning\);) N
(        std::cerr << "Configuration file missing. A new one will be created." <<) N
( std::endl;) N
(        config = nlohmann::json::object\(\); // Initialize config as an empty obje) N
(ct) N
(    }) N
() N
(    // Parse and store command line arguments from cmdArgs) N
(    for \(const auto& argPair : cmdArgs.getArgValues\(\)\) {) N
(        std::string key = argPair.first;) N
(        std::string value = argPair.second;) N
(        commandLineArgs[key] = value;) N
(    }) N
(}) N
() N
(void ConfigManager::applyDefaults\(\) {) N
(    auto defaultConfig = DefaultSettings::getDefaultConfig\(\);) N
(    config = defaultConfig; // Start with default config) N
() N
(    std::ifstream file\(filePath\);) N
(    if \(file\) {) N
(        try {) N
(            nlohmann::json fileConfig;) N
(            file >> fileConfig;) N
(            mergeJson\(config, fileConfig\);) N
(        } catch \(const nlohmann::json::parse_error& e\) {) N
(            Logger::getInstance\(\).log\("JSON parsing error: " + std::string\(e.wha) N
(t\(\)\), "ConfigManager::ConfigManager", Logger::Severity::Error\);) N
(        }) N
(    }) N
(}) N
(void ConfigManager::mergeJson\(nlohmann::json& base, const nlohmann::json& update) N
(\) {) N
(    for \(auto& el : base.items\(\)\) {) N
(        if \(update.contains\(el.key\(\)\)\) {) N
(            if \(el.value\(\).is_object\(\) && update[el.key\(\)].is_object\(\)\) {) N
(                mergeJson\(base[el.key\(\)], update[el.key\(\)]\);) N
(            } else {) N
(                // For non-object types, or if the type in 'update' differs, ove) N
(rwrite the value in 'base') N
(                base[el.key\(\)] = update[el.key\(\)];) N
(            }) N
(        }) N
(    }) N
(}) N
(void ConfigManager::parseCommandLineArgs\(int argc, char** argv\) {) N
(    for \(int i = 1; i < argc; ++i\) {) N
(        std::string arg = argv[i];) N
(        if \(arg.size\(\) >= 2 && arg.substr\(0, 2\) == "--"\) {) N
(            size_t equalPos = arg.find\('='\);) N
(            if \(equalPos != std::string::npos\) {) N
(                std::string key = arg.substr\(2, equalPos - 2\);) N
(                std::string value = arg.substr\(equalPos + 1\);) N
(                commandLineArgs[key] = value;) N
(            }) N
(        }) N
(    }) N
(}) N
(largefile.txt) (Page 64/75) (dec 10, 23 21:52) title
border
grestore
(Printed by Henrik S\303\270rensen) rhead
(largefile.txt) (32/38) (s\303\270ndag december 10, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (65-66) 33
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(nlohmann::json& ConfigManager::getRefToValue\(const std::string& key\) {) N
(    nlohmann::json* j = &config;) N
(    std::istringstream iss\(key\);) N
(    std::string token;) N
(    while \(std::getline\(iss, token, '.'\)\) {) N
(        j = &\(\(*j\)[token]\);) N
(    }) N
(    return *j;) N
(}) N
() N
(// Explicit template instantiation) N
(template int ConfigManager::get<int>\(const std::string& key\) const;) N
(template std::string ConfigManager::get<std::string>\(const std::string& key\) con) N
(st;) N
(template void ConfigManager::set<int>\(const std::string& key, const int& value\);) N
(template void ConfigManager::set<std::string>\(const std::string& key, const std:) N
(:string& value\);) N
() N
(ConfigManager::~ConfigManager\(\) {}) N
(// Other methods...) N
(---- END OF FILE: /home/henrik/Projekter/AppFramework/subprojects/CommandLinePro) N
(cessor/ConfigManager.cpp ----) N
() N
(---- START OF FILE: /home/henrik/Projekter/AppFramework/subprojects/CommandLineP) N
(rocessor/Argument.cpp ----) N
(/*) N
(  This file is part of the AppFramework project.) N
() N
(  AppFramework is free software: you can redistribute it and/or modify) N
(  it under the terms of the GNU General Public License as published by) N
(  the Free Software Foundation, GPL version 4.) N
() N
(  AppFramework is distributed in the hope that it will be useful,) N
(  but WITHOUT ANY WARRANTY; without even the implied warranty of) N
(  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the) N
(  GNU General Public License version 4 for more details.) N
() N
(  You should have received a copy of the GNU General Public License) N
(  along with AppFramework. If not, see <https://www.gnu.org/licenses/>.) N
(*/) N
() N
(// Argument.cpp) N
() N
(#include "Argument.hpp") N
() N
(Argument::Argument\() S 24 T (const std::string& longname, ) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (const std::string& shortname,) N
(                   ) S 24 T (const std::string& description,) N
(                   ) S 24 T (bool hasShortValue, ) N
(                   ) S 24 T (bool needValue,) N
(                   ) S 24 T (E_Argument_ValueType valueType\) : ) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (longName\(longname\),) N
(    ) S 8 T () S 16 T () S 24 T () S 32 T (shortName\(shortname\), ) N
(    ) S 8 T () S 16 T () S 24 T () S 32 T (description\(description\),) N
(    ) S 8 T () S 16 T () S 24 T () S 32 T (hasShortValueflag\(hasShortValue\),) N
(      ) S 8 T () S 16 T () S 24 T () S 32 T (needValue\(needValue\), ) N
(      ) S 8 T () S 16 T () S 24 T () S 32 T (valueType\(valueType\) {}) N
() N
(Argument::Argument\(const ArgumentData& data\):) N
(longName\(data.longName\), ) N
(shortName\(data.shortName\), ) N
(largefile.txt) (Page 65/75) (dec 10, 23 21:52) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(description\(data.description\),) p n
(hasShortValueflag\(data.hasShortValue\),) N
(needValue\(data.needValue\), ) N
(valueType\(data.valueType\), ) N
(defaultValue\(data.defaultValue\),) N
(hasDefaultValueFlag\(data.hasDefaultValue\){}) N
() N
(std::string ) S 16 T () S 24 T () S 32 T (Argument::getLongName\(\) ) S 64 T (const) S 72 T ({return ) N
(longName;}) N
(std::string ) S 16 T () S 24 T () S 32 T (Argument::getShortName\(\) ) S 64 T (const ) S 72 T ({return ) N
(shortName;}) N
(std::string ) S 16 T () S 24 T () S 32 T (Argument::getDescription\(\) ) S 64 T (const ) S 72 T ({return ) N
(description;}) N
(bool ) S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (Argument::hasShortValue\(\) ) S 72 T (const ) S 80 T () N
({return hasShortValueflag;}) N
(bool ) S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (Argument::needsValue\(\) ) S 64 T () S 72 T (const ) S 80 T () N
({return needValue;}) N
(E_Argument_ValueType ) S 24 T (Argument::getValueType\(\) ) S 56 T (const ) S 64 T ({return valueTyp) N
(e;}) N
() N
(void Argument::setValue\(const std::string& value\) {) N
(    this->value = value;) N
(}) N
() N
(void Argument::setDefaultValue\(const std::string& defaultValue\) {) N
(    this->defaultValue = defaultValue;) N
(    this->hasDefaultValueFlag = true;) N
(}) N
() N
(std::string Argument::getDefaultValue\(\) const {) N
(    return defaultValue;) N
(}) N
() N
(bool Argument::hasDefaultValue\(\) const {) N
(    return hasDefaultValueFlag;) N
(}) N
() N
(//CHANGED: Moved the template function definition to the header file) N
(template <typename T>) N
(T Argument::getValue\(\) const {) N
(    // Check if a value has been set for this argument) N
(    if \(value.empty\(\)\) {) N
(        // If no value has been set and a default value is available, return it) N
(        if \(hasDefaultValueFlag\) {) N
(            std::istringstream defaultValueStream\(defaultValue\);) N
(            T defaultValueValue;) N
(            defaultValueStream >> defaultValueValue;) N
(            return defaultValueValue;) N
(        } else {) N
(            // If no value or default value is available, throw an exception or ) N
(return a suitable default value) N
(            throw std::logic_error\("No value set for this argument."\);) N
(        }) N
(    }) N
() N
(    // Convert the stored string value to the requested type based on valueType) N
(    std::istringstream valueStream\(value\);) N
(    T typedValue;) N
() N
(    // Use try-catch for error handling during conversion) N
(    try {) N
(        valueStream >> typedValue;) N
(largefile.txt) (Page 66/75) (dec 10, 23 21:52) title
border
grestore
(Printed by Henrik S\303\270rensen) rhead
(largefile.txt) (33/38) (s\303\270ndag december 10, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (67-68) 34
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    } catch \(const std::exception& e\) {) p n
(        // Conversion failed; throw an exception or handle the error accordingly) N
(        throw std::invalid_argument\("Error converting argument value to the requ) N
(ested type."\);) N
(    }) N
() N
(    if \(valueStream.fail\(\) || !valueStream.eof\(\)\) {) N
(        // Conversion failed or there is extra data in the string) N
(        throw std::invalid_argument\("Invalid argument value."\);) N
(    }) N
() N
(    return typedValue;) N
(}) N
(// Instantiate the template function for specific types you use in Argument.cpp) N
(template std::string Argument::getValue<std::string>\(\) const;) N
(template int Argument::getValue<int>\(\) const;) N
(template float Argument::getValue<float>\(\) const;---- END OF FILE: /home/henrik/) N
(Projekter/AppFramework/subprojects/CommandLineProcessor/Argument.cpp ----) N
() N
(---- START OF FILE: /home/henrik/Projekter/AppFramework/subprojects/CommandLineP) N
(rocessor/ConfigManager.hpp ----) N
(/*) N
(  This file is part of the AppFramework project.) N
() N
(  AppFramework is free software: you can redistribute it and/or modify) N
(  it under the terms of the GNU General Public License as published by) N
(  the Free Software Foundation, GPL version 4.) N
() N
(  AppFramework is distributed in the hope that it will be useful,) N
(  but WITHOUT ANY WARRANTY; without even the implied warranty of) N
(  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the) N
(  GNU General Public License version 4 for more details.) N
() N
(  You should have received a copy of the GNU General Public License) N
(  along with AppFramework. If not, see <https://www.gnu.org/licenses/>.) N
(*/) N
() N
(// ConfigManager.hpp) N
() N
(#ifndef CONFIGMANAGER_HPP) N
(#define CONFIGMANAGER_HPP) N
() N
(#include "Arguments.hpp") N
(#include <iostream>) N
(#include <string>) N
(#include <mutex>) N
(#include <nlohmann/json.hpp>) N
(#include <unordered_map>) N
() N
(class ConfigManager {) N
(public:) N
(    ConfigManager\(const std::string& configFilePath, const Arguments& cmdArgs\);) N
(    ~ConfigManager\(\);) N
() N
(    void applyDefaults\(\);) N
() S 8 T (void mergeJson\(nlohmann::json& base, const nlohmann::json& update\);) N
() N
(    template<typename T>) N
(    T get\(const std::string& key\) const;) N
() N
(    template<typename T>) N
(    void set\(const std::string& key, const T& value\);) N
(largefile.txt) (Page 67/75) (dec 10, 23 21:52) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(    void sync\(\);) N
() N
(private:) N
(    const Arguments& cmdArgs; // Reference to an Arguments instance) N
(    nlohmann::json config;) N
(    std::string filePath;) N
(    ) N
(    const nlohmann::json& getRefToValue\(const std::string& key, bool forRead\) co) N
(nst;) N
(    nlohmann::json& getRefToValue\(const std::string& key\);) N
() N
(    std::unordered_map<std::string, std::string> commandLineArgs; // Store comma) N
(nd line arguments) N
() N
(    void parseCommandLineArgs\(int argc, char** argv\);) N
(    ) N
(#ifdef THREAD_SAFE) N
(    static std::mutex mtx;) N
(#endif) N
(};) N
() N
(#endif // CONFIGMANAGER_HPP) N
(---- END OF FILE: /home/henrik/Projekter/AppFramework/subprojects/CommandLinePro) N
(cessor/ConfigManager.hpp ----) N
() N
(---- START OF FILE: /home/henrik/Projekter/AppFramework/subprojects/CommandLineP) N
(rocessor/Arguments.hpp ----) N
(/*) N
(  This file is part of the AppFramework project.) N
() N
(  AppFramework is free software: you can redistribute it and/or modify) N
(  it under the terms of the GNU General Public License as published by) N
(  the Free Software Foundation, GPL version 4.) N
() N
(  AppFramework is distributed in the hope that it will be useful,) N
(  but WITHOUT ANY WARRANTY; without even the implied warranty of) N
(  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the) N
(  GNU General Public License version 4 for more details.) N
() N
(  You should have received a copy of the GNU General Public License) N
(  along with AppFramework. If not, see <https://www.gnu.org/licenses/>.) N
(*/) N
() N
(//Arguments.hpp) N
() N
(#ifndef ARGUMENTS_HPP) N
(#define ARGUMENTS_HPP) N
() N
(#include "Argument.hpp") N
(#include <string>) N
(#include <map>) N
(#include <stdexcept>) N
(#include <vector>) N
() N
(class Arguments {) N
(public:) N
(    Arguments\(int argc, char* argv[], const std::map<std::string, Argument>& def) N
(inedArgs\);) N
() N
(    const std::map<std::string, std::string>& getArgValues\(\) const { return argV) N
(alues; }) N
(largefile.txt) (Page 68/75) (dec 10, 23 21:52) title
border
grestore
(Printed by Henrik S\303\270rensen) rhead
(largefile.txt) (34/38) (s\303\270ndag december 10, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (69-70) 35
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    std::string getArgValue\(const std::string& argName\) const;) p n
(    bool isInArgs\(const std::string& str\) const;) N
(   ) S 8 T (std::vector<std::string> getGtkArguments\(\) const;) N
(private:) N
(    std::map<std::string, std::string> argValues; // Maps argument names to thei) N
(r values) N
(};) N
() N
(#endif // ARGUMENTS_HPP) N
() N
(---- END OF FILE: /home/henrik/Projekter/AppFramework/subprojects/CommandLinePro) N
(cessor/Arguments.hpp ----) N
() N
(---- START OF FILE: /home/henrik/Projekter/AppFramework/subprojects/CommandLineP) N
(rocessor/CMakeLists.txt ----) N
(cmake_minimum_required\(VERSION 3.10\)) N
() N
(# Define the CommandLineProcessor library) N
(add_library\(CommandLineProcessor) N
(    ArgumentConfig.cpp) N
(    Argument.cpp) N
(    Arguments.cpp) N
(    CommandLineProcessor.cpp) N
(    ConfigManager.cpp) N
(    DefaultSettings.cpp) N
(\)) N
() N
(# Set include directories for CommandLineProcessor library) N
(target_include_directories\(CommandLineProcessor) N
(    PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}) N
(\)) N
() N
(# Link CommandLineProcessor with other subproject dependencies \(if any\)) N
(target_link_libraries\(CommandLineProcessor) N
(    PRIVATE) N
(        Logger) N
(        StringUtils) N
(        TimeUtils) N
(        EnvVar) N
(    # Add any other dependencies as needed) N
(\)) N
(---- END OF FILE: /home/henrik/Projekter/AppFramework/subprojects/CommandLinePro) N
(cessor/CMakeLists.txt ----) N
() N
(---- START OF FILE: /home/henrik/Projekter/AppFramework/subprojects/CommandLineP) N
(rocessor/Arguments.cpp ----) N
(/*) N
(  This file is part of the AppFramework project.) N
() N
(  AppFramework is free software: you can redistribute it and/or modify) N
(  it under the terms of the GNU General Public License as published by) N
(  the Free Software Foundation, GPL version 4.) N
() N
(  AppFramework is distributed in the hope that it will be useful,) N
(  but WITHOUT ANY WARRANTY; without even the implied warranty of) N
(  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the) N
(  GNU General Public License version 4 for more details.) N
() N
(  You should have received a copy of the GNU General Public License) N
(  along with AppFramework. If not, see <https://www.gnu.org/licenses/>.) N
(*/) N
() N
(largefile.txt) (Page 69/75) (dec 10, 23 21:52) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(// Arguments.cpp) p n
() N
(#include <iostream>) N
(#include "Arguments.hpp") N
() N
(Arguments::Arguments\(int argc, char* argv[], const std::map<std::string, Argumen) N
(t>& definedArgs\) {) N
(    for \(const auto& argPair : definedArgs\) {) N
(        if \(argPair.second.hasDefaultValue\(\)\) {) N
(            argValues[argPair.first] = argPair.second.getDefaultValue\(\);) N
(        }) N
(    }) N
() N
(    for \(int i = 1; i < argc; ++i\) {) N
(        std::string currentArg = argv[i];) N
(        auto it = definedArgs.find\(currentArg\);) N
() N
(        if \(it == definedArgs.end\(\)\) {) N
(            for \(const auto& argPair : definedArgs\) {) N
(                if \(argPair.second.getShortName\(\) == currentArg\) {) N
(                    it = definedArgs.find\(argPair.second.getLongName\(\)\);) N
(                    break;) N
(                }) N
(            }) N
(        }) N
() N
(        if \(it != definedArgs.end\(\)\) {) N
(            const Argument& arg = it->second;) N
() N
(            if \(arg.needsValue\(\)\) {) N
(                if \(i + 1 < argc\) {) N
(                    argValues[it->first] = argv[i + 1];) N
(                    ++i;) N
(                } else {) N
(                    throw std::runtime_error\("Missing argument value for " + cur) N
(rentArg\);) N
(                }) N
(            } else {) N
(                argValues[it->first] = "";) N
(            }) N
(        } else {) N
(            throw std::runtime_error\("Unknown argument " + currentArg\);) N
(        }) N
(    }) N
(}) N
() N
(std::string Arguments::getArgValue\(const std::string& argName\) const {) N
(    auto it = argValues.find\(argName\);) N
(    if \(it != argValues.end\(\)\) {) N
(        return it->second;) N
(    }) N
(    return "";) N
(}) N
() N
(bool Arguments::isInArgs\(const std::string& str\) const {) N
(    return argValues.find\(str\) != argValues.end\(\);) N
(}) N
() N
(std::vector<std::string> Arguments::getGtkArguments\(\) const {) N
(    std::vector<std::string> gtkArgs;) N
() N
(    for \(const auto& argPair : argValues\) {) N
(largefile.txt) (Page 70/75) (dec 10, 23 21:52) title
border
grestore
(Printed by Henrik S\303\270rensen) rhead
(largefile.txt) (35/38) (s\303\270ndag december 10, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (71-72) 36
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        const std::string& arg = argPair.first;) p n
() N
(        // Check if the argument is a GTK argument) N
(        if \(arg.find\("--gtk-"\) == 0\) {) N
(            // Construct the argument string as it would appear on the command l) N
(ine) N
(            std::string argStr = arg + \(argPair.second.empty\(\) ? "" : "=" + argP) N
(air.second\);) N
(            gtkArgs.push_back\(argStr\);) N
(        }) N
(    }) N
() N
(    return gtkArgs;) N
(}---- END OF FILE: /home/henrik/Projekter/AppFramework/subprojects/CommandLinePr) N
(ocessor/Arguments.cpp ----) N
() N
(---- START OF FILE: /home/henrik/Projekter/AppFramework/subprojects/CommandLineP) N
(rocessor/Argument.hpp ----) N
(/*) N
(  This file is part of the AppFramework project.) N
() N
(  AppFramework is free software: you can redistribute it and/or modify) N
(  it under the terms of the GNU General Public License as published by) N
(  the Free Software Foundation, GPL version 4.) N
() N
(  AppFramework is distributed in the hope that it will be useful,) N
(  but WITHOUT ANY WARRANTY; without even the implied warranty of) N
(  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the) N
(  GNU General Public License version 4 for more details.) N
() N
(  You should have received a copy of the GNU General Public License) N
(  along with AppFramework. If not, see <https://www.gnu.org/licenses/>.) N
(*/) N
() N
(//Argument.hpp) N
() N
(#ifndef ARGUMENT_HPP) N
(#define ARGUMENT_HPP) N
() N
(#include <string>) N
(#include <sstream>) N
(#include <stdexcept>) N
() N
(enum class E_Argument_ValueType {) N
(    None,) N
(    Integer,) N
(    Float,) N
(    String,) N
(    // Add more types as needed) N
(};) N
() N
(// Define a struct to hold all argument data \(if you are using this approach\)) N
(struct ArgumentData {) N
(    std::string longName;) N
(    std::string shortName;) N
(    std::string description;) N
(    bool hasShortValue;) N
(    bool needValue;) N
(    E_Argument_ValueType valueType;) N
(    std::string defaultValue;) N
(    bool hasDefaultValue;) N
(};) N
(largefile.txt) (Page 71/75) (dec 10, 23 21:52) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(class Argument {) N
(public:) N
(    Argument\(const std::string& longname,  ) N
(    ) S 8 T () S 16 T (const std::string& shortname, ) N
(            const std::string& description, ) N
(            const bool hasShortValue,) N
(            const bool needValue, ) N
(            const E_Argument_ValueType valueType\);) N
() N
(    // Constructor that takes ArgumentData struct) N
(    Argument\(const ArgumentData& data\);) N
() N
(    std::string getLongName\(\) const;) N
(    std::string getShortName\(\) const;) N
(    std::string getDescription\(\) const;) N
(    bool hasShortValue\(\) const;) N
(    bool needsValue\(\) const;) N
(    E_Argument_ValueType getValueType\(\) const;) N
() N
(    void setValue\(const std::string& value\);) N
(    void setDefaultValue\(const std::string& defaultValue\);) N
(    std::string getDefaultValue\(\) const;) N
(    bool hasDefaultValue\(\) const;) N
() N
(    //CHANGED: Moved the template function definition to the header file) N
(    template <typename T>) N
(    T getValue\(\) const;) N
() N
(private:) N
(    std::string longName;) N
(    std::string shortName;) N
(    std::string description;) N
(    bool hasShortValueflag;) N
(    bool needValue;) N
(    E_Argument_ValueType valueType;) N
(    std::string value; // Store the value as a string) N
() N
(    // New members for default value handling) N
(    std::string defaultValue;) N
(    bool hasDefaultValueFlag = false;) N
(};) N
() N
(#endif // ARGUMENT_HPP) N
() N
() N
(---- END OF FILE: /home/henrik/Projekter/AppFramework/subprojects/CommandLinePro) N
(cessor/Argument.hpp ----) N
() N
(---- START OF FILE: /home/henrik/Projekter/AppFramework/subprojects/CommandLineP) N
(rocessor/CommandLineProcessor.cpp ----) N
(/*) N
(  This file is part of the AppFramework project.) N
() N
(  AppFramework is free software: you can redistribute it and/or modify) N
(  it under the terms of the GNU General Public License as published by) N
(  the Free Software Foundation, GPL version 4.) N
() N
(  AppFramework is distributed in the hope that it will be useful,) N
(  but WITHOUT ANY WARRANTY; without even the implied warranty of) N
(  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the) N
(  GNU General Public License version 4 for more details.) N
(largefile.txt) (Page 72/75) (dec 10, 23 21:52) title
border
grestore
(Printed by Henrik S\303\270rensen) rhead
(largefile.txt) (36/38) (s\303\270ndag december 10, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (73-74) 37
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(  You should have received a copy of the GNU General Public License) N
(  along with AppFramework. If not, see <https://www.gnu.org/licenses/>.) N
(*/) N
() N
(//CommandLineProcessor.cpp) N
() N
(#include <iostream>) N
(#include "CommandLineProcessor.hpp") N
() N
(CommandLineProcessor::CommandLineProcessor\(const Arguments& args\) : args\(args\) {) N
(}) N
() N
(void CommandLineProcessor::AddArgumentHandler\(const Argument& arg, ArgumentHandl) N
(er handler\) {) N
(    auto argPtr = std::make_shared<Argument>\(arg\);) N
(    handlers[arg.getLongName\(\)] = ArgumentHandlerPair\(argPtr, handler\);) N
() N
(    if \(!arg.getShortName\(\).empty\(\)\) {) N
(        handlers[arg.getShortName\(\)] = ArgumentHandlerPair\(argPtr, handler\);) N
(    }) N
(}) N
() N
(void CommandLineProcessor::Process\(\) {) N
(    for \(const auto& argPair : args.getArgValues\(\)\) {) N
(        std::string argName = argPair.first;) N
() N
(        auto it = handlers.find\(argName\);) N
(        if \(it != handlers.end\(\)\) {) N
(            // Update the value of the argument before calling the handler) N
(            it->second.arg->setValue\(argPair.second\);) N
(            it->second.handler\(it->second.arg\);) N
(        }else{) N
(        ) S 16 T (std::cout << "No handler found for: " << argName << std::endl;) N
(        }) N
(    }) N
(}---- END OF FILE: /home/henrik/Projekter/AppFramework/subprojects/CommandLinePr) N
(ocessor/CommandLineProcessor.cpp ----) N
() N
(---- START OF FILE: /home/henrik/Projekter/AppFramework/subprojects/CommandLineP) N
(rocessor/DefaultSettings.hpp ----) N
(/*) N
(  This file is part of the AppEssential project.) N
() N
(  AppEssential is free software: you can redistribute it and/or modify) N
(  it under the terms of the GNU General Public License as published by) N
(  the Free Software Foundation, GPL version 4.) N
() N
(  AppEssential is distributed in the hope that it will be useful,) N
(  but WITHOUT ANY WARRANTY; without even the implied warranty of) N
(  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the) N
(  GNU General Public License version 4 for more details.) N
() N
(  You should have received a copy of the GNU General Public License) N
(  along with AppEssential. If not, see <https://www.gnu.org/licenses/>.) N
(*/) N
() N
(//DefaultSettings.hpp) N
() N
(#ifndef DEFAULTSETTINGS_HPP) N
(#define DEFAULTSETTINGS_HPP) N
() N
(largefile.txt) (Page 73/75) (dec 10, 23 21:52) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#include <nlohmann/json.hpp>) p n
() N
(class DefaultSettings {) N
(public:) N
(    static const nlohmann::json defaultConfig;) N
(    static const nlohmann::json getDefaultConfig\(\);) N
(};) N
() N
(#endif // DEFAULTSETTINGS_HPP) N
(---- END OF FILE: /home/henrik/Projekter/AppFramework/subprojects/CommandLinePro) N
(cessor/DefaultSettings.hpp ----) N
() N
(---- START OF FILE: /home/henrik/Projekter/AppFramework/subprojects/CommandLineP) N
(rocessor/CommandLineProcessor.hpp ----) N
(/*) N
(  This file is part of the AppFramework project.) N
() N
(  AppFramework is free software: you can redistribute it and/or modify) N
(  it under the terms of the GNU General Public License as published by) N
(  the Free Software Foundation, GPL version 4.) N
() N
(  AppFramework is distributed in the hope that it will be useful,) N
(  but WITHOUT ANY WARRANTY; without even the implied warranty of) N
(  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the) N
(  GNU General Public License version 4 for more details.) N
() N
(  You should have received a copy of the GNU General Public License) N
(  along with AppFramework. If not, see <https://www.gnu.org/licenses/>.) N
(*/) N
() N
(//CommandLineProcessor.hpp) N
() N
(#ifndef COMMANDLINEPROCESSOR_HPP) N
(#define COMMANDLINEPROCESSOR_HPP) N
() N
(#include <functional>) N
(#include <map>) N
(#include <string>) N
(#include <memory>) N
(#include "Argument.hpp") N
(#include "Arguments.hpp") N
() N
(using ArgumentHandler = std::function<void\(const std::shared_ptr<Argument>&\)>;) N
() N
(struct ArgumentHandlerPair {) N
(    std::shared_ptr<Argument> arg;) N
(    ArgumentHandler handler;) N
() N
(    ArgumentHandlerPair\(std::shared_ptr<Argument> arg, const ArgumentHandler& ha) N
(ndler\)) N
(        : arg\(std::move\(arg\)\), handler\(handler\) {}) N
() N
(    ArgumentHandlerPair\(\) = default;) N
(};) N
() N
(class CommandLineProcessor {) N
(public:) N
(    explicit CommandLineProcessor\(const Arguments& args\);) N
() N
(    void AddArgumentHandler\(const Argument& arg, ArgumentHandler handler\);) N
(    void Process\(\);) N
() N
(largefile.txt) (Page 74/75) (dec 10, 23 21:52) title
border
grestore
(Printed by Henrik S\303\270rensen) rhead
(largefile.txt) (37/38) (s\303\270ndag december 10, 2023) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (75) 38
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(private:) p n
(    const Arguments& args;) N
(    std::map<std::string, ArgumentHandlerPair> handlers;) N
(};) N
() N
(#endif // COMMANDLINEPROCESSOR_HPP) N
(---- END OF FILE: /home/henrik/Projekter/AppFramework/subprojects/CommandLinePro) N
(cessor/CommandLineProcessor.hpp ----) N
() N
(largefile.txt) (Page 75/75) (dec 10, 23 21:52) title
border
grestore
(Printed by Henrik S\303\270rensen) rhead
(largefile.txt) (38/38) (s\303\270ndag december 10, 2023) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
